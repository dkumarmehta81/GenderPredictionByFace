{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "15927082",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-31T10:28:36.896732Z",
     "iopub.status.busy": "2024-12-31T10:28:36.896426Z",
     "iopub.status.idle": "2024-12-31T10:28:55.467006Z",
     "shell.execute_reply": "2024-12-31T10:28:55.466034Z"
    },
    "papermill": {
     "duration": 18.577263,
     "end_time": "2024-12-31T10:28:55.468557",
     "exception": false,
     "start_time": "2024-12-31T10:28:36.891294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "datasets = [\"/kaggle/input/cell-images-for-detecting-malaria/cell_images\"]\n",
    "class_names_label = {'Parasitized': 0, 'Uninfected': 1}\n",
    "import tensorflow as tf\n",
    "from skimage.color import rgb2gray\n",
    "import os\n",
    "import numpy as np\n",
    "import cv2\n",
    "from tqdm import tqdm\n",
    "from skimage.feature import hog, local_binary_pattern\n",
    "from scipy.signal import convolve2d\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "from itertools import combinations\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "from tensorflow.keras import models, layers\n",
    "from tensorflow.keras.models import Sequential, Model\n",
    "from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, Input\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\n",
    "from tensorflow.keras.mixed_precision import set_global_policy\n",
    "from tensorflow.keras.backend import clear_session\n",
    "import random\n",
    "\n",
    "# Set mixed precision policy\n",
    "set_global_policy('mixed_float16')\n",
    "\n",
    "# Clear session\n",
    "clear_session()\n",
    "random.seed(42)  # Python random seed\n",
    "np.random.seed(42)  # NumPy random seed\n",
    "tf.random.set_seed(42)  # TensorFlow random seed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "098045c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:28:55.476608Z",
     "iopub.status.busy": "2024-12-31T10:28:55.476160Z",
     "iopub.status.idle": "2024-12-31T10:29:50.445618Z",
     "shell.execute_reply": "2024-12-31T10:29:50.444461Z"
    },
    "papermill": {
     "duration": 54.974966,
     "end_time": "2024-12-31T10:29:50.447329",
     "exception": false,
     "start_time": "2024-12-31T10:28:55.472363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset: /kaggle/input/cell-images-for-detecting-malaria/cell_images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing Uninfected: 100%|██████████| 2296/2296 [00:25<00:00, 91.70it/s]\n",
      "Processing Parasitized: 100%|██████████| 2296/2296 [00:28<00:00, 80.52it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Images shape: (4592, 128, 128, 3)\n",
      "Labels shape: (4592,)\n",
      "Class distribution: {0: 2296, 1: 2296}\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import cv2\n",
    "from tqdm import tqdm\n",
    "from skimage.color import rgb2gray\n",
    "import random\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "random.seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Class mapping: Parasitized as 0, Uninfected as 1\n",
    "class_names_label = {'Parasitized': 0, 'Uninfected': 1}\n",
    "\n",
    "# Preprocessing functions\n",
    "def sharpen_image(image):\n",
    "    \"\"\"Apply sharpening to an image.\"\"\"\n",
    "    kernel = np.array([[0, -1, 0],\n",
    "                       [-1, 5, -1],\n",
    "                       [0, -1, 0]])\n",
    "    return cv2.filter2D(image, -1, kernel)\n",
    "\n",
    "def gaussian_blur(image):\n",
    "    \"\"\"Apply Gaussian blur to smooth the image.\"\"\"\n",
    "    return cv2.GaussianBlur(image, (5, 5), 0)\n",
    "\n",
    "def equalize_histogram(image):\n",
    "    \"\"\"Apply histogram equalization.\"\"\"\n",
    "    if len(image.shape) == 3:  # Color image\n",
    "        lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)\n",
    "        l, a, b = cv2.split(lab)\n",
    "        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))\n",
    "        l = clahe.apply(l)\n",
    "        lab = cv2.merge((l, a, b))\n",
    "        return cv2.cvtColor(lab, cv2.COLOR_LAB2BGR)\n",
    "    else:  # Grayscale image\n",
    "        return cv2.equalizeHist(image)\n",
    "\n",
    "def load_data_with_preprocessing(datasets, class_names_label):\n",
    "    images = []\n",
    "    labels = []\n",
    "    \n",
    "    for dataset in datasets:\n",
    "        print(\"Loading dataset:\", dataset)\n",
    "        for folder in os.listdir(dataset):\n",
    "            label = class_names_label.get(folder)\n",
    "            if label is None:\n",
    "                continue  # Skip folders not in the classification mapping\n",
    "            \n",
    "            folder_path = os.path.join(dataset, folder)\n",
    "            all_files = os.listdir(folder_path)\n",
    "            sampled_files = random.sample(all_files, len(all_files) // 6)  # Sample half\n",
    "            \n",
    "            for file in tqdm(sampled_files, desc=f\"Processing {folder}\"):\n",
    "                file_path = os.path.join(folder_path, file)\n",
    "                \n",
    "                # Load and preprocess image\n",
    "                image = cv2.imread(file_path)\n",
    "                if image is None:\n",
    "                    continue  # Skip corrupted images\n",
    "                \n",
    "                image = cv2.resize(image, (128, 128))  # Resize to 128x128\n",
    "                image = sharpen_image(image)          # Apply sharpening\n",
    "                image = gaussian_blur(image)         # Apply Gaussian blur\n",
    "                image = equalize_histogram(image)    # Apply histogram equalization\n",
    "                image = image / 255.0                # Normalize to [0, 1]\n",
    "                \n",
    "                images.append(image)\n",
    "                labels.append(label)\n",
    "    \n",
    "    images = np.array(images, dtype='float32')\n",
    "    labels = np.array(labels, dtype='int32')\n",
    "    return images, labels\n",
    "\n",
    "# Dataset path\n",
    "datasets = [\"/kaggle/input/cell-images-for-detecting-malaria/cell_images\"]\n",
    "\n",
    "# Load data\n",
    "images, labels = load_data_with_preprocessing(datasets, class_names_label)\n",
    "\n",
    "# Display dataset summary\n",
    "print(\"Images shape:\", images.shape)\n",
    "print(\"Labels shape:\", labels.shape)\n",
    "print(\"Class distribution:\", dict(zip(*np.unique(labels, return_counts=True))))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "adbde621",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:29:50.499095Z",
     "iopub.status.busy": "2024-12-31T10:29:50.498833Z",
     "iopub.status.idle": "2024-12-31T10:29:50.511456Z",
     "shell.execute_reply": "2024-12-31T10:29:50.510858Z"
    },
    "papermill": {
     "duration": 0.039579,
     "end_time": "2024-12-31T10:29:50.512717",
     "exception": false,
     "start_time": "2024-12-31T10:29:50.473138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "from skimage.color import rgb2gray\n",
    "\n",
    "def extract_hog_features(images):\n",
    "    hog_features = []\n",
    "    for image in images:\n",
    "        # Convert the image to grayscale\n",
    "        gray_image = rgb2gray(image)  # Converts RGB to grayscale\n",
    "        hog_feat = hog(gray_image, orientations=9, pixels_per_cell=(8, 8),\n",
    "                       cells_per_block=(2, 2), block_norm='L2-Hys', channel_axis=None)\n",
    "        hog_features.append(hog_feat)\n",
    "    return np.array(hog_features)\n",
    "def extract_gabor_features(images):\n",
    "    gabor_features = []\n",
    "    num_kernels = 8  # Number of orientations\n",
    "    for image in images:\n",
    "        gray_image = rgb2gray(image)\n",
    "        feature_vector = []\n",
    "        for theta in range(num_kernels):\n",
    "            theta_rad = theta / num_kernels * np.pi\n",
    "            gabor_filter = create_gabor_filter(theta_rad)\n",
    "            filtered_image = convolve2d(gray_image, gabor_filter, mode='same')\n",
    "            feature_vector.append(np.mean(filtered_image))  # Use the mean as a feature\n",
    "        gabor_features.append(feature_vector)\n",
    "    return np.array(gabor_features)\n",
    "\n",
    "# Function to create Gabor filter\n",
    "def create_gabor_filter(theta, sigma=1.0, frequency=0.5):\n",
    "    size = 21  # Kernel size\n",
    "    x, y = np.meshgrid(np.linspace(-1, 1, size), np.linspace(-1, 1, size))\n",
    "    rotx = x * np.cos(theta) + y * np.sin(theta)\n",
    "    roty = -x * np.sin(theta) + y * np.cos(theta)\n",
    "    gabor = np.exp(-(rotx**2 + roty**2) / (2 * sigma**2)) * np.cos(2 * np.pi * frequency * rotx)\n",
    "    return gabor\n",
    "from skimage.color import rgb2gray\n",
    "from skimage.feature import local_binary_pattern\n",
    "import numpy as np\n",
    "\n",
    "def extract_lbp_features(images, radius=3, n_points=24):\n",
    "    lbp_features = []\n",
    "    for image in images:\n",
    "        # Convert to grayscale\n",
    "        gray_image = rgb2gray(image)\n",
    "        \n",
    "        # Convert grayscale image to an integer type (e.g., uint8)\n",
    "        gray_image = (gray_image * 255).astype(np.uint8)  # Scaling to 255 and converting to uint8\n",
    "\n",
    "        # Compute LBP\n",
    "        lbp = local_binary_pattern(gray_image, n_points, radius, method=\"uniform\")\n",
    "\n",
    "        # Flatten the LBP histogram as a feature vector\n",
    "        (hist, _) = np.histogram(lbp.ravel(), bins=np.arange(0, n_points + 3), range=(0, n_points + 2))\n",
    "\n",
    "        # Normalize the histogram\n",
    "        hist = hist.astype(\"float\")\n",
    "        hist /= hist.sum()\n",
    "\n",
    "        lbp_features.append(hist)\n",
    "    \n",
    "    return np.array(lbp_features)\n",
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "def extract_sift_features(images, max_features=128):\n",
    "    sift_features = []\n",
    "    sift = cv2.SIFT_create()\n",
    "    \n",
    "    for image in images:\n",
    "        gray_image = rgb2gray(image)  # Convert to grayscale\n",
    "        gray_image = (gray_image * 255).astype('uint8')  # Ensure correct format for SIFT\n",
    "        \n",
    "        keypoints, descriptors = sift.detectAndCompute(gray_image, None)\n",
    "        \n",
    "        if descriptors is None:\n",
    "            descriptors = np.zeros((1, 128))  # Handle images with no keypoints\n",
    "        \n",
    "        # Pad or truncate to ensure uniform descriptor size\n",
    "        if descriptors.shape[0] > max_features:\n",
    "            descriptors = descriptors[:max_features]\n",
    "        elif descriptors.shape[0] < max_features:\n",
    "            padding = np.zeros((max_features - descriptors.shape[0], descriptors.shape[1]))\n",
    "            descriptors = np.vstack((descriptors, padding))\n",
    "        \n",
    "        # Flatten descriptors and add to the list\n",
    "        sift_features.append(descriptors.flatten())\n",
    "    \n",
    "    return np.array(sift_features)\n",
    "\n",
    "def extract_contour_features(images, max_contours=10):\n",
    "    contour_features = []\n",
    "    \n",
    "    for image in images:\n",
    "        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Convert to grayscale\n",
    "        _, binary = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)  # Apply binary thresholding\n",
    "        \n",
    "        # Ensure binary image is of type uint8 (CV_8UC1)\n",
    "        binary = binary.astype(np.uint8)\n",
    "        \n",
    "        # Find contours\n",
    "        contours, _ = cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
    "        \n",
    "        # Flatten the contours into a feature vector\n",
    "        contour_vector = np.zeros(max_contours, dtype=object)  # Initialize an array to store contour features\n",
    "        for i, contour in enumerate(contours[:max_contours]):\n",
    "            contour_vector[i] = contour.flatten()  # Flatten each contour\n",
    "        \n",
    "        contour_features.append(contour_vector.flatten())  # Flatten the entire contour list and append\n",
    "    \n",
    "    return np.array(contour_features)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c16102ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:29:50.563537Z",
     "iopub.status.busy": "2024-12-31T10:29:50.563174Z",
     "iopub.status.idle": "2024-12-31T10:29:50.832791Z",
     "shell.execute_reply": "2024-12-31T10:29:50.831735Z"
    },
    "papermill": {
     "duration": 0.296705,
     "end_time": "2024-12-31T10:29:50.834224",
     "exception": false,
     "start_time": "2024-12-31T10:29:50.537519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data shape: (3673, 128, 128, 3)\n",
      "Training labels shape: (3673,)\n",
      "Testing data shape: (919, 128, 128, 3)\n",
      "Testing labels shape: (919,)\n",
      "Class distribution in training set: {0: 1836, 1: 1837}\n",
      "Class distribution in testing set: {0: 460, 1: 459}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split the dataset into training and testing sets (80% training, 20% testing)\n",
    "X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42, stratify=labels)\n",
    "\n",
    "# Display the shape of the resulting datasets\n",
    "print(\"Training data shape:\", X_train.shape)\n",
    "print(\"Training labels shape:\", y_train.shape)\n",
    "print(\"Testing data shape:\", X_test.shape)\n",
    "print(\"Testing labels shape:\", y_test.shape)\n",
    "\n",
    "# Class distribution in training and testing sets\n",
    "train_distribution = dict(zip(*np.unique(y_train, return_counts=True)))\n",
    "test_distribution = dict(zip(*np.unique(y_test, return_counts=True)))\n",
    "print(\"Class distribution in training set:\", train_distribution)\n",
    "print(\"Class distribution in testing set:\", test_distribution)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1bab023c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:29:50.884066Z",
     "iopub.status.busy": "2024-12-31T10:29:50.883801Z",
     "iopub.status.idle": "2024-12-31T10:29:51.562426Z",
     "shell.execute_reply": "2024-12-31T10:29:51.561673Z"
    },
    "papermill": {
     "duration": 0.71192,
     "end_time": "2024-12-31T10:29:51.570444",
     "exception": false,
     "start_time": "2024-12-31T10:29:50.858524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "\n",
    "def display_sample_images(images, labels, class_mapping, num_samples=5):\n",
    "    \"\"\"\n",
    "    Display sample images with their labels.\n",
    "    :param images: Array of image data\n",
    "    :param labels: Array of corresponding labels\n",
    "    :param class_mapping: Dictionary mapping class IDs to class names\n",
    "    :param num_samples: Number of samples to display\n",
    "    \"\"\"\n",
    "    plt.figure(figsize=(15, 5))\n",
    "    for i in range(num_samples):\n",
    "        idx = random.randint(0, len(images) - 1)\n",
    "        image = images[idx]\n",
    "        label = labels[idx]\n",
    "        class_name = class_mapping.get(label, \"Unknown\")  # Safely retrieve class name\n",
    "        \n",
    "        plt.subplot(1, num_samples, i + 1)\n",
    "        plt.imshow(image)\n",
    "        plt.title(f\"Class: {class_name}\")\n",
    "        plt.axis('off')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Update class mapping\n",
    "class_mapping = {0: 'Parasitized', 1: 'Uninfected'}\n",
    "\n",
    "# Display 5 random samples from the dataset\n",
    "display_sample_images(images, labels, class_mapping, num_samples=5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "291008f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:29:51.635405Z",
     "iopub.status.busy": "2024-12-31T10:29:51.635097Z",
     "iopub.status.idle": "2024-12-31T10:41:15.994597Z",
     "shell.execute_reply": "2024-12-31T10:41:15.993690Z"
    },
    "papermill": {
     "duration": 684.393487,
     "end_time": "2024-12-31T10:41:15.996349",
     "exception": false,
     "start_time": "2024-12-31T10:29:51.602862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature extraction\n",
    "hog_train = extract_hog_features(X_train)\n",
    "hog_test = extract_hog_features(X_test)\n",
    "gabor_train = extract_gabor_features(X_train)\n",
    "gabor_test = extract_gabor_features(X_test)\n",
    "lbp_train = extract_lbp_features(X_train)\n",
    "lbp_test = extract_lbp_features(X_test)\n",
    "sift_train = extract_sift_features(X_train)\n",
    "sift_test = extract_sift_features(X_test)\n",
    "contour_train = extract_contour_features(X_train)\n",
    "contour_test = extract_contour_features(X_test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b34a0e32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:41:16.061722Z",
     "iopub.status.busy": "2024-12-31T10:41:16.061352Z",
     "iopub.status.idle": "2024-12-31T10:41:16.564335Z",
     "shell.execute_reply": "2024-12-31T10:41:16.563412Z"
    },
    "papermill": {
     "duration": 0.537149,
     "end_time": "2024-12-31T10:41:16.565987",
     "exception": false,
     "start_time": "2024-12-31T10:41:16.028838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Normalize features\n",
    "scaler = MinMaxScaler()\n",
    "sift_train = scaler.fit_transform(sift_train)\n",
    "sift_test = scaler.transform(sift_test)\n",
    "lbp_train = scaler.fit_transform(lbp_train)\n",
    "lbp_test = scaler.transform(lbp_test)\n",
    "contour_train = scaler.fit_transform(contour_train)\n",
    "contour_test = scaler.transform(contour_test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a1339779",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:41:16.632195Z",
     "iopub.status.busy": "2024-12-31T10:41:16.631900Z",
     "iopub.status.idle": "2024-12-31T10:41:16.635249Z",
     "shell.execute_reply": "2024-12-31T10:41:16.634592Z"
    },
    "papermill": {
     "duration": 0.037878,
     "end_time": "2024-12-31T10:41:16.636504",
     "exception": false,
     "start_time": "2024-12-31T10:41:16.598626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Combine features\n",
    "feature_inputs = {\n",
    "    'HOG': hog_train,\n",
    "    'Gabor': gabor_train,\n",
    "    'LBP': lbp_train,\n",
    "    'SIFT': sift_train,\n",
    "    'Contour': contour_train,\n",
    "}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3a2f93cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:41:16.700800Z",
     "iopub.status.busy": "2024-12-31T10:41:16.700549Z",
     "iopub.status.idle": "2024-12-31T10:41:18.166413Z",
     "shell.execute_reply": "2024-12-31T10:41:18.165497Z"
    },
    "papermill": {
     "duration": 1.499702,
     "end_time": "2024-12-31T10:41:18.168076",
     "exception": false,
     "start_time": "2024-12-31T10:41:16.668374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Dropout, Flatten, Dense, concatenate, GlobalAveragePooling2D, GlobalMaxPooling2D\n",
    "\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "from itertools import combinations\n",
    "from tensorflow.keras.regularizers import l2\n",
    "\n",
    "# Input layer\n",
    "input_image = Input(shape=(128, 128, 3), name='Image_Input')\n",
    "\n",
    "# Block 1\n",
    "conv1 = Conv2D(32, (3, 3), activation='relu', padding='same')(input_image)\n",
    "# b1 = BatchNormalization()(conv1)\n",
    "pool1 = MaxPooling2D((2, 2))(conv1)\n",
    "drop1 = Dropout(0.3)(pool1)\n",
    "\n",
    "# Block 2\n",
    "conv2 = Conv2D(64, (3, 3), activation='relu', padding='same')(drop1)\n",
    "# b2 = BatchNormalization()(conv2)\n",
    "pool2 = MaxPooling2D((2, 2))(conv2)\n",
    "drop2 = Dropout(0.4)(pool2)\n",
    "\n",
    "# Block 3\n",
    "conv3 = Conv2D(128, (3, 3), activation='relu', padding='same')(drop2)\n",
    "# b3 = BatchNormalization()(conv3)\n",
    "pool3 = MaxPooling2D((2, 2))(conv3)\n",
    "drop3 = Dropout(0.5)(pool3)\n",
    "\n",
    "# Block 4\n",
    "conv4 = Conv2D(256, (3, 3), activation='relu', padding='same')(drop3)\n",
    "# b4 = BatchNormalization()(conv4)\n",
    "pool4 = MaxPooling2D((2, 2))(conv4)\n",
    "drop4 = Dropout(0.6)(pool4)\n",
    "\n",
    "# # Block 4\n",
    "# conv5 = Conv2D(512, (3, 3), activation='relu', padding='same')(drop4)\n",
    "# # b4 = BatchNormalization()(conv4)\n",
    "# pool5 = MaxPooling2D((2, 2))(conv5)\n",
    "# drop5 = Dropout(0.5)(pool5)\n",
    "\n",
    "# Flatten the CNN output\n",
    "flat_cnn = Flatten()(drop4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9a345c61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T10:41:18.234643Z",
     "iopub.status.busy": "2024-12-31T10:41:18.234354Z",
     "iopub.status.idle": "2024-12-31T11:15:44.746303Z",
     "shell.execute_reply": "2024-12-31T11:15:44.745375Z"
    },
    "papermill": {
     "duration": 2066.546856,
     "end_time": "2024-12-31T11:15:44.747689",
     "exception": false,
     "start_time": "2024-12-31T10:41:18.200833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing combination: ('CNN',)\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 239ms/step - accuracy: 0.4907 - loss: 1.3421\n",
      "Epoch 1: val_accuracy improved from -inf to 0.49932, saving model to model_combination_CNN.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 279ms/step - accuracy: 0.4908 - loss: 1.3371 - val_accuracy: 0.4993 - val_loss: 0.7875\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.5003 - loss: 0.7063\n",
      "Epoch 2: val_accuracy did not improve from 0.49932\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - accuracy: 0.5005 - loss: 0.7062 - val_accuracy: 0.4993 - val_loss: 0.7712\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.5082 - loss: 0.6970\n",
      "Epoch 3: val_accuracy did not improve from 0.49932\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - accuracy: 0.5082 - loss: 0.6970 - val_accuracy: 0.4993 - val_loss: 0.7458\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.5000 - loss: 0.6992\n",
      "Epoch 4: val_accuracy did not improve from 0.49932\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.5003 - loss: 0.6992 - val_accuracy: 0.4993 - val_loss: 0.7235\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.5038 - loss: 0.6959\n",
      "Epoch 5: val_accuracy improved from 0.49932 to 0.51565, saving model to model_combination_CNN.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - accuracy: 0.5042 - loss: 0.6958 - val_accuracy: 0.5156 - val_loss: 0.7119\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.5449 - loss: 0.6884\n",
      "Epoch 6: val_accuracy improved from 0.51565 to 0.77143, saving model to model_combination_CNN.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - accuracy: 0.5460 - loss: 0.6878 - val_accuracy: 0.7714 - val_loss: 0.5486\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.7690 - loss: 0.5379\n",
      "Epoch 7: val_accuracy improved from 0.77143 to 0.82857, saving model to model_combination_CNN.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - accuracy: 0.7696 - loss: 0.5370 - val_accuracy: 0.8286 - val_loss: 0.4062\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.8978 - loss: 0.3082\n",
      "Epoch 8: val_accuracy improved from 0.82857 to 0.92653, saving model to model_combination_CNN.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.8982 - loss: 0.3072 - val_accuracy: 0.9265 - val_loss: 0.2129\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9394 - loss: 0.2057\n",
      "Epoch 9: val_accuracy improved from 0.92653 to 0.94422, saving model to model_combination_CNN.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.9395 - loss: 0.2053 - val_accuracy: 0.9442 - val_loss: 0.1746\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9454 - loss: 0.1657\n",
      "Epoch 10: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - accuracy: 0.9454 - loss: 0.1657 - val_accuracy: 0.9429 - val_loss: 0.1732\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9506 - loss: 0.1700\n",
      "Epoch 11: val_accuracy improved from 0.94422 to 0.94830, saving model to model_combination_CNN.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.9506 - loss: 0.1699 - val_accuracy: 0.9483 - val_loss: 0.1559\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9493 - loss: 0.1466\n",
      "Epoch 12: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9493 - loss: 0.1467 - val_accuracy: 0.9415 - val_loss: 0.1677\n",
      "Epoch 13/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9518 - loss: 0.1493\n",
      "Epoch 13: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - accuracy: 0.9518 - loss: 0.1493 - val_accuracy: 0.9429 - val_loss: 0.1588\n",
      "Epoch 14/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9487 - loss: 0.1469\n",
      "Epoch 14: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9488 - loss: 0.1469 - val_accuracy: 0.9442 - val_loss: 0.1622\n",
      "Epoch 15/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9522 - loss: 0.1555\n",
      "Epoch 15: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9523 - loss: 0.1553 - val_accuracy: 0.9401 - val_loss: 0.1658\n",
      "Epoch 16/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9567 - loss: 0.1423\n",
      "Epoch 16: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 21ms/step - accuracy: 0.9566 - loss: 0.1424 - val_accuracy: 0.9442 - val_loss: 0.1640\n",
      "Epoch 16: early stopping\n",
      "Restoring model weights from the end of the best epoch: 11.\n",
      "Combination ('CNN',) -> Test Accuracy: 0.9674\n",
      "Testing combination: ('HOG',)\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.5752 - loss: 1.2102\n",
      "Epoch 1: val_accuracy improved from -inf to 0.69796, saving model to model_combination_HOG.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 32ms/step - accuracy: 0.5756 - loss: 1.2068 - val_accuracy: 0.6980 - val_loss: 0.5703\n",
      "Epoch 2/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6896 - loss: 0.5824\n",
      "Epoch 2: val_accuracy improved from 0.69796 to 0.73878, saving model to model_combination_HOG.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6901 - loss: 0.5820 - val_accuracy: 0.7388 - val_loss: 0.5270\n",
      "Epoch 3/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7354 - loss: 0.5323\n",
      "Epoch 3: val_accuracy improved from 0.73878 to 0.75782, saving model to model_combination_HOG.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.7359 - loss: 0.5318 - val_accuracy: 0.7578 - val_loss: 0.4984\n",
      "Epoch 4/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7608 - loss: 0.4892\n",
      "Epoch 4: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7610 - loss: 0.4886 - val_accuracy: 0.7565 - val_loss: 0.4869\n",
      "Epoch 5/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7853 - loss: 0.4586\n",
      "Epoch 5: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7857 - loss: 0.4582 - val_accuracy: 0.7551 - val_loss: 0.4788\n",
      "Epoch 6/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7956 - loss: 0.4482\n",
      "Epoch 6: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7955 - loss: 0.4483 - val_accuracy: 0.7388 - val_loss: 0.4967\n",
      "Epoch 7/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8219 - loss: 0.4068\n",
      "Epoch 7: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8212 - loss: 0.4072 - val_accuracy: 0.7442 - val_loss: 0.4856\n",
      "Epoch 8/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8201 - loss: 0.3944\n",
      "Epoch 8: val_accuracy improved from 0.75782 to 0.76463, saving model to model_combination_HOG.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8205 - loss: 0.3940 - val_accuracy: 0.7646 - val_loss: 0.4875\n",
      "Epoch 9/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8354 - loss: 0.3805\n",
      "Epoch 9: val_accuracy did not improve from 0.76463\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8352 - loss: 0.3816 - val_accuracy: 0.7605 - val_loss: 0.4829\n",
      "Epoch 10/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8151 - loss: 0.3967\n",
      "Epoch 10: val_accuracy did not improve from 0.76463\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8155 - loss: 0.3972 - val_accuracy: 0.7293 - val_loss: 0.4986\n",
      "Epoch 11/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8351 - loss: 0.3706\n",
      "Epoch 11: val_accuracy did not improve from 0.76463\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8355 - loss: 0.3703 - val_accuracy: 0.7524 - val_loss: 0.4932\n",
      "Epoch 12/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8417 - loss: 0.3648\n",
      "Epoch 12: val_accuracy did not improve from 0.76463\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8414 - loss: 0.3656 - val_accuracy: 0.7374 - val_loss: 0.5032\n",
      "Epoch 13/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8335 - loss: 0.3828\n",
      "Epoch 13: val_accuracy did not improve from 0.76463\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8335 - loss: 0.3826 - val_accuracy: 0.7592 - val_loss: 0.4927\n",
      "Epoch 13: early stopping\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Combination ('HOG',) -> Test Accuracy: 0.7497\n",
      "Testing combination: ('Gabor',)\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.4897 - loss: 1.8047\n",
      "Epoch 1: val_accuracy improved from -inf to 0.50068, saving model to model_combination_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 26ms/step - accuracy: 0.4898 - loss: 1.8014 - val_accuracy: 0.5007 - val_loss: 0.7047\n",
      "Epoch 2/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5032 - loss: 0.9017\n",
      "Epoch 2: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5022 - loss: 0.8940 - val_accuracy: 0.5007 - val_loss: 0.7113\n",
      "Epoch 3/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5167 - loss: 0.7317\n",
      "Epoch 3: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5148 - loss: 0.7313 - val_accuracy: 0.5007 - val_loss: 0.6949\n",
      "Epoch 4/20\n",
      "\u001b[1m83/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4933 - loss: 0.7209\n",
      "Epoch 4: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4933 - loss: 0.7203 - val_accuracy: 0.5007 - val_loss: 0.6934\n",
      "Epoch 5/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4863 - loss: 0.7121\n",
      "Epoch 5: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4886 - loss: 0.7113 - val_accuracy: 0.5007 - val_loss: 0.6925\n",
      "Epoch 6/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4873 - loss: 0.7049\n",
      "Epoch 6: val_accuracy improved from 0.50068 to 0.50340, saving model to model_combination_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4894 - loss: 0.7043 - val_accuracy: 0.5034 - val_loss: 0.6926\n",
      "Epoch 7/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5120 - loss: 0.6979\n",
      "Epoch 7: val_accuracy did not improve from 0.50340\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5109 - loss: 0.6980 - val_accuracy: 0.4993 - val_loss: 0.6931\n",
      "Epoch 8/20\n",
      "\u001b[1m83/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4904 - loss: 0.7019\n",
      "Epoch 8: val_accuracy did not improve from 0.50340\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4919 - loss: 0.7015 - val_accuracy: 0.4993 - val_loss: 0.6937\n",
      "Epoch 9/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4940 - loss: 0.6997\n",
      "Epoch 9: val_accuracy did not improve from 0.50340\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4950 - loss: 0.6995 - val_accuracy: 0.4993 - val_loss: 0.6940\n",
      "Epoch 10/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5116 - loss: 0.6974\n",
      "Epoch 10: val_accuracy did not improve from 0.50340\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5113 - loss: 0.6972 - val_accuracy: 0.4993 - val_loss: 0.6947\n",
      "Epoch 11/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5157 - loss: 0.6957\n",
      "Epoch 11: val_accuracy did not improve from 0.50340\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5153 - loss: 0.6957 - val_accuracy: 0.4993 - val_loss: 0.6946\n",
      "Epoch 11: early stopping\n",
      "Restoring model weights from the end of the best epoch: 6.\n",
      "Combination ('Gabor',) -> Test Accuracy: 0.5049\n",
      "Testing combination: ('LBP',)\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.6049 - loss: 0.7451\n",
      "Epoch 1: val_accuracy improved from -inf to 0.70612, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 25ms/step - accuracy: 0.6056 - loss: 0.7440 - val_accuracy: 0.7061 - val_loss: 0.5483\n",
      "Epoch 2/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7312 - loss: 0.5342\n",
      "Epoch 2: val_accuracy improved from 0.70612 to 0.72381, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7295 - loss: 0.5346 - val_accuracy: 0.7238 - val_loss: 0.5189\n",
      "Epoch 3/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7392 - loss: 0.5114\n",
      "Epoch 3: val_accuracy improved from 0.72381 to 0.73878, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7387 - loss: 0.5121 - val_accuracy: 0.7388 - val_loss: 0.5020\n",
      "Epoch 4/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7545 - loss: 0.4939\n",
      "Epoch 4: val_accuracy improved from 0.73878 to 0.74694, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7537 - loss: 0.4947 - val_accuracy: 0.7469 - val_loss: 0.4892\n",
      "Epoch 5/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7523 - loss: 0.4876\n",
      "Epoch 5: val_accuracy improved from 0.74694 to 0.75374, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7523 - loss: 0.4880 - val_accuracy: 0.7537 - val_loss: 0.4795\n",
      "Epoch 6/20\n",
      "\u001b[1m83/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7628 - loss: 0.4794\n",
      "Epoch 6: val_accuracy improved from 0.75374 to 0.76735, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7626 - loss: 0.4798 - val_accuracy: 0.7673 - val_loss: 0.4741\n",
      "Epoch 7/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7769 - loss: 0.4687\n",
      "Epoch 7: val_accuracy improved from 0.76735 to 0.77007, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7752 - loss: 0.4703 - val_accuracy: 0.7701 - val_loss: 0.4672\n",
      "Epoch 8/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7739 - loss: 0.4576\n",
      "Epoch 8: val_accuracy improved from 0.77007 to 0.77143, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7737 - loss: 0.4592 - val_accuracy: 0.7714 - val_loss: 0.4622\n",
      "Epoch 9/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7701 - loss: 0.4620\n",
      "Epoch 9: val_accuracy improved from 0.77143 to 0.77687, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7702 - loss: 0.4632 - val_accuracy: 0.7769 - val_loss: 0.4594\n",
      "Epoch 10/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7713 - loss: 0.4598\n",
      "Epoch 10: val_accuracy improved from 0.77687 to 0.78367, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7711 - loss: 0.4608 - val_accuracy: 0.7837 - val_loss: 0.4571\n",
      "Epoch 11/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7758 - loss: 0.4530\n",
      "Epoch 11: val_accuracy improved from 0.78367 to 0.78639, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7753 - loss: 0.4544 - val_accuracy: 0.7864 - val_loss: 0.4543\n",
      "Epoch 12/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7742 - loss: 0.4522\n",
      "Epoch 12: val_accuracy improved from 0.78639 to 0.79184, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7740 - loss: 0.4533 - val_accuracy: 0.7918 - val_loss: 0.4517\n",
      "Epoch 13/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7707 - loss: 0.4504\n",
      "Epoch 13: val_accuracy did not improve from 0.79184\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7708 - loss: 0.4519 - val_accuracy: 0.7918 - val_loss: 0.4513\n",
      "Epoch 14/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7769 - loss: 0.4477\n",
      "Epoch 14: val_accuracy improved from 0.79184 to 0.79320, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7770 - loss: 0.4487 - val_accuracy: 0.7932 - val_loss: 0.4470\n",
      "Epoch 15/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7885 - loss: 0.4467\n",
      "Epoch 15: val_accuracy did not improve from 0.79320\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7874 - loss: 0.4481 - val_accuracy: 0.7891 - val_loss: 0.4484\n",
      "Epoch 16/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7721 - loss: 0.4515\n",
      "Epoch 16: val_accuracy did not improve from 0.79320\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7721 - loss: 0.4525 - val_accuracy: 0.7864 - val_loss: 0.4466\n",
      "Epoch 17/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7875 - loss: 0.4396\n",
      "Epoch 17: val_accuracy improved from 0.79320 to 0.79592, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7865 - loss: 0.4414 - val_accuracy: 0.7959 - val_loss: 0.4453\n",
      "Epoch 18/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7843 - loss: 0.4426\n",
      "Epoch 18: val_accuracy did not improve from 0.79592\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7839 - loss: 0.4438 - val_accuracy: 0.7918 - val_loss: 0.4432\n",
      "Epoch 19/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7891 - loss: 0.4370\n",
      "Epoch 19: val_accuracy did not improve from 0.79592\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7881 - loss: 0.4385 - val_accuracy: 0.7918 - val_loss: 0.4420\n",
      "Epoch 20/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7723 - loss: 0.4428\n",
      "Epoch 20: val_accuracy improved from 0.79592 to 0.79864, saving model to model_combination_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7727 - loss: 0.4443 - val_accuracy: 0.7986 - val_loss: 0.4431\n",
      "Restoring model weights from the end of the best epoch: 20.\n",
      "Combination ('LBP',) -> Test Accuracy: 0.7911\n",
      "Testing combination: ('SIFT',)\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.7290 - loss: 0.7949\n",
      "Epoch 1: val_accuracy improved from -inf to 0.79728, saving model to model_combination_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 35ms/step - accuracy: 0.7294 - loss: 0.7932 - val_accuracy: 0.7973 - val_loss: 0.4173\n",
      "Epoch 2/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8589 - loss: 0.3233\n",
      "Epoch 2: val_accuracy improved from 0.79728 to 0.82041, saving model to model_combination_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.8587 - loss: 0.3246 - val_accuracy: 0.8204 - val_loss: 0.3835\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8888 - loss: 0.2714\n",
      "Epoch 3: val_accuracy improved from 0.82041 to 0.82721, saving model to model_combination_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.8888 - loss: 0.2715 - val_accuracy: 0.8272 - val_loss: 0.3763\n",
      "Epoch 4/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9127 - loss: 0.2161\n",
      "Epoch 4: val_accuracy improved from 0.82721 to 0.83673, saving model to model_combination_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.9127 - loss: 0.2161 - val_accuracy: 0.8367 - val_loss: 0.3776\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9208 - loss: 0.1824\n",
      "Epoch 5: val_accuracy did not improve from 0.83673\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9208 - loss: 0.1826 - val_accuracy: 0.8327 - val_loss: 0.3942\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9300 - loss: 0.1691\n",
      "Epoch 6: val_accuracy improved from 0.83673 to 0.85034, saving model to model_combination_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.9299 - loss: 0.1695 - val_accuracy: 0.8503 - val_loss: 0.3711\n",
      "Epoch 7/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9202 - loss: 0.1859\n",
      "Epoch 7: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9200 - loss: 0.1862 - val_accuracy: 0.8122 - val_loss: 0.5202\n",
      "Epoch 8/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8843 - loss: 0.2640\n",
      "Epoch 8: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8881 - loss: 0.2565 - val_accuracy: 0.8490 - val_loss: 0.4046\n",
      "Epoch 9/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9327 - loss: 0.1547\n",
      "Epoch 9: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9341 - loss: 0.1528 - val_accuracy: 0.8463 - val_loss: 0.4218\n",
      "Epoch 10/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9576 - loss: 0.1095\n",
      "Epoch 10: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9585 - loss: 0.1072 - val_accuracy: 0.8449 - val_loss: 0.4842\n",
      "Epoch 11/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9644 - loss: 0.0866\n",
      "Epoch 11: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9650 - loss: 0.0861 - val_accuracy: 0.8435 - val_loss: 0.4813\n",
      "Epoch 11: early stopping\n",
      "Restoring model weights from the end of the best epoch: 6.\n",
      "Combination ('SIFT',) -> Test Accuracy: 0.8335\n",
      "Testing combination: ('Contour',)\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.5025 - loss: 1.0853\n",
      "Epoch 1: val_accuracy improved from -inf to 0.50068, saving model to model_combination_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 26ms/step - accuracy: 0.5024 - loss: 1.0851 - val_accuracy: 0.5007 - val_loss: 1.0463\n",
      "Epoch 2/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4973 - loss: 1.0366\n",
      "Epoch 2: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4960 - loss: 1.0348 - val_accuracy: 0.4993 - val_loss: 1.0021\n",
      "Epoch 3/20\n",
      "\u001b[1m83/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4804 - loss: 0.9934\n",
      "Epoch 3: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4807 - loss: 0.9924 - val_accuracy: 0.4993 - val_loss: 0.9649\n",
      "Epoch 4/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4804 - loss: 0.9578\n",
      "Epoch 4: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4807 - loss: 0.9568 - val_accuracy: 0.4993 - val_loss: 0.9336\n",
      "Epoch 5/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4788 - loss: 0.9275\n",
      "Epoch 5: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4791 - loss: 0.9267 - val_accuracy: 0.4993 - val_loss: 0.9071\n",
      "Epoch 6/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4788 - loss: 0.9019\n",
      "Epoch 6: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4791 - loss: 0.9013 - val_accuracy: 0.4993 - val_loss: 0.8845\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('Contour',) -> Test Accuracy: 0.4995\n",
      "Testing combination: ('CNN', 'HOG')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 223ms/step - accuracy: 0.7566 - loss: 0.8496\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94830, saving model to model_combination_CNN_HOG.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 256ms/step - accuracy: 0.7578 - loss: 0.8455 - val_accuracy: 0.9483 - val_loss: 0.1510\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9445 - loss: 0.1782\n",
      "Epoch 2: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9446 - loss: 0.1780 - val_accuracy: 0.9361 - val_loss: 0.1596\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9492 - loss: 0.1494\n",
      "Epoch 3: val_accuracy improved from 0.94830 to 0.95102, saving model to model_combination_CNN_HOG.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9493 - loss: 0.1495 - val_accuracy: 0.9510 - val_loss: 0.1431\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9553 - loss: 0.1373\n",
      "Epoch 4: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9554 - loss: 0.1372 - val_accuracy: 0.9442 - val_loss: 0.1472\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9592 - loss: 0.1204\n",
      "Epoch 5: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9592 - loss: 0.1205 - val_accuracy: 0.9483 - val_loss: 0.1421\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9592 - loss: 0.1215\n",
      "Epoch 6: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9593 - loss: 0.1213 - val_accuracy: 0.9442 - val_loss: 0.1481\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9682 - loss: 0.0960\n",
      "Epoch 7: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9682 - loss: 0.0961 - val_accuracy: 0.9510 - val_loss: 0.1300\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9686 - loss: 0.0947\n",
      "Epoch 8: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9685 - loss: 0.0946 - val_accuracy: 0.9510 - val_loss: 0.1218\n",
      "Epoch 8: early stopping\n",
      "Restoring model weights from the end of the best epoch: 3.\n",
      "Combination ('CNN', 'HOG') -> Test Accuracy: 0.9619\n",
      "Testing combination: ('CNN', 'Gabor')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 224ms/step - accuracy: 0.8729 - loss: 0.3365\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94150, saving model to model_combination_CNN_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 254ms/step - accuracy: 0.8735 - loss: 0.3356 - val_accuracy: 0.9415 - val_loss: 0.1542\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9449 - loss: 0.2014\n",
      "Epoch 2: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9449 - loss: 0.2011 - val_accuracy: 0.9361 - val_loss: 0.1778\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9412 - loss: 0.1761\n",
      "Epoch 3: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9413 - loss: 0.1761 - val_accuracy: 0.9347 - val_loss: 0.1622\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9477 - loss: 0.1670\n",
      "Epoch 4: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9477 - loss: 0.1669 - val_accuracy: 0.9401 - val_loss: 0.1714\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9504 - loss: 0.1610\n",
      "Epoch 5: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9504 - loss: 0.1611 - val_accuracy: 0.9388 - val_loss: 0.1706\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9529 - loss: 0.1496\n",
      "Epoch 6: val_accuracy improved from 0.94150 to 0.94422, saving model to model_combination_CNN_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.9529 - loss: 0.1497 - val_accuracy: 0.9442 - val_loss: 0.1512\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9535 - loss: 0.1497\n",
      "Epoch 7: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9534 - loss: 0.1499 - val_accuracy: 0.9415 - val_loss: 0.1685\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9483 - loss: 0.1557\n",
      "Epoch 8: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9483 - loss: 0.1556 - val_accuracy: 0.9388 - val_loss: 0.1603\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9510 - loss: 0.1422\n",
      "Epoch 9: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9510 - loss: 0.1423 - val_accuracy: 0.9429 - val_loss: 0.1575\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9552 - loss: 0.1456\n",
      "Epoch 10: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9552 - loss: 0.1458 - val_accuracy: 0.9401 - val_loss: 0.1702\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9566 - loss: 0.1403\n",
      "Epoch 11: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9566 - loss: 0.1403 - val_accuracy: 0.9442 - val_loss: 0.1553\n",
      "Epoch 11: early stopping\n",
      "Restoring model weights from the end of the best epoch: 6.\n",
      "Combination ('CNN', 'Gabor') -> Test Accuracy: 0.9641\n",
      "Testing combination: ('CNN', 'LBP')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 223ms/step - accuracy: 0.8724 - loss: 0.3531\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93061, saving model to model_combination_CNN_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 251ms/step - accuracy: 0.8730 - loss: 0.3520 - val_accuracy: 0.9306 - val_loss: 0.1900\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9458 - loss: 0.1698\n",
      "Epoch 2: val_accuracy improved from 0.93061 to 0.94286, saving model to model_combination_CNN_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.9459 - loss: 0.1697 - val_accuracy: 0.9429 - val_loss: 0.1628\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9497 - loss: 0.1528\n",
      "Epoch 3: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9497 - loss: 0.1529 - val_accuracy: 0.9293 - val_loss: 0.1804\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9514 - loss: 0.1518\n",
      "Epoch 4: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9514 - loss: 0.1517 - val_accuracy: 0.9374 - val_loss: 0.1689\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9578 - loss: 0.1380\n",
      "Epoch 5: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9578 - loss: 0.1378 - val_accuracy: 0.9306 - val_loss: 0.1711\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9530 - loss: 0.1360\n",
      "Epoch 6: val_accuracy improved from 0.94286 to 0.94694, saving model to model_combination_CNN_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.9529 - loss: 0.1360 - val_accuracy: 0.9469 - val_loss: 0.1533\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9521 - loss: 0.1533\n",
      "Epoch 7: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9522 - loss: 0.1531 - val_accuracy: 0.9388 - val_loss: 0.1517\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9576 - loss: 0.1305\n",
      "Epoch 8: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9576 - loss: 0.1306 - val_accuracy: 0.9388 - val_loss: 0.1513\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9559 - loss: 0.1262\n",
      "Epoch 9: val_accuracy improved from 0.94694 to 0.94830, saving model to model_combination_CNN_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.9559 - loss: 0.1262 - val_accuracy: 0.9483 - val_loss: 0.1609\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9533 - loss: 0.1409\n",
      "Epoch 10: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9534 - loss: 0.1406 - val_accuracy: 0.9388 - val_loss: 0.1526\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9617 - loss: 0.1164\n",
      "Epoch 11: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9617 - loss: 0.1163 - val_accuracy: 0.9388 - val_loss: 0.1495\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9581 - loss: 0.1197\n",
      "Epoch 12: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9581 - loss: 0.1198 - val_accuracy: 0.9388 - val_loss: 0.1617\n",
      "Epoch 13/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9624 - loss: 0.1110\n",
      "Epoch 13: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9623 - loss: 0.1110 - val_accuracy: 0.9388 - val_loss: 0.1431\n",
      "Epoch 14/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9617 - loss: 0.1240\n",
      "Epoch 14: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9617 - loss: 0.1239 - val_accuracy: 0.9469 - val_loss: 0.1461\n",
      "Epoch 14: early stopping\n",
      "Restoring model weights from the end of the best epoch: 9.\n",
      "Combination ('CNN', 'LBP') -> Test Accuracy: 0.9652\n",
      "Testing combination: ('CNN', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 229ms/step - accuracy: 0.8318 - loss: 0.5783\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94150, saving model to model_combination_CNN_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 266ms/step - accuracy: 0.8325 - loss: 0.5759 - val_accuracy: 0.9415 - val_loss: 0.1426\n",
      "Epoch 2/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9426 - loss: 0.1721\n",
      "Epoch 2: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9427 - loss: 0.1720 - val_accuracy: 0.9388 - val_loss: 0.1502\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9666 - loss: 0.1048\n",
      "Epoch 3: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9666 - loss: 0.1046 - val_accuracy: 0.9252 - val_loss: 0.1990\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9715 - loss: 0.0748\n",
      "Epoch 4: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9715 - loss: 0.0749 - val_accuracy: 0.9333 - val_loss: 0.1865\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9817 - loss: 0.0566\n",
      "Epoch 5: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9817 - loss: 0.0567 - val_accuracy: 0.9211 - val_loss: 0.1717\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9877 - loss: 0.0438\n",
      "Epoch 6: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9877 - loss: 0.0437 - val_accuracy: 0.9415 - val_loss: 0.1889\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('CNN', 'SIFT') -> Test Accuracy: 0.9641\n",
      "Testing combination: ('CNN', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 228ms/step - accuracy: 0.8721 - loss: 0.3527\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94966, saving model to model_combination_CNN_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 257ms/step - accuracy: 0.8727 - loss: 0.3515 - val_accuracy: 0.9497 - val_loss: 0.1993\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9506 - loss: 0.1651\n",
      "Epoch 2: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9507 - loss: 0.1651 - val_accuracy: 0.9333 - val_loss: 0.2099\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9532 - loss: 0.1535\n",
      "Epoch 3: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9532 - loss: 0.1536 - val_accuracy: 0.9347 - val_loss: 0.1980\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9530 - loss: 0.1549\n",
      "Epoch 4: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9531 - loss: 0.1547 - val_accuracy: 0.9442 - val_loss: 0.1607\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9510 - loss: 0.1472\n",
      "Epoch 5: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9511 - loss: 0.1470 - val_accuracy: 0.9429 - val_loss: 0.1785\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9526 - loss: 0.1369\n",
      "Epoch 6: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9526 - loss: 0.1369 - val_accuracy: 0.9469 - val_loss: 0.1555\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('CNN', 'Contour') -> Test Accuracy: 0.9619\n",
      "Testing combination: ('HOG', 'Gabor')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.5396 - loss: 1.3190\n",
      "Epoch 1: val_accuracy improved from -inf to 0.71293, saving model to model_combination_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 32ms/step - accuracy: 0.5400 - loss: 1.3153 - val_accuracy: 0.7129 - val_loss: 0.5885\n",
      "Epoch 2/20\n",
      "\u001b[1m83/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6608 - loss: 0.6198\n",
      "Epoch 2: val_accuracy improved from 0.71293 to 0.73333, saving model to model_combination_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6626 - loss: 0.6183 - val_accuracy: 0.7333 - val_loss: 0.5437\n",
      "Epoch 3/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7009 - loss: 0.5775\n",
      "Epoch 3: val_accuracy improved from 0.73333 to 0.73741, saving model to model_combination_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7017 - loss: 0.5765 - val_accuracy: 0.7374 - val_loss: 0.5148\n",
      "Epoch 4/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7333 - loss: 0.5372\n",
      "Epoch 4: val_accuracy improved from 0.73741 to 0.74422, saving model to model_combination_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7338 - loss: 0.5364 - val_accuracy: 0.7442 - val_loss: 0.5083\n",
      "Epoch 5/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7771 - loss: 0.4901\n",
      "Epoch 5: val_accuracy did not improve from 0.74422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7770 - loss: 0.4901 - val_accuracy: 0.7429 - val_loss: 0.4942\n",
      "Epoch 6/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7802 - loss: 0.4692\n",
      "Epoch 6: val_accuracy did not improve from 0.74422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7803 - loss: 0.4691 - val_accuracy: 0.7429 - val_loss: 0.4903\n",
      "Epoch 7/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7969 - loss: 0.4480\n",
      "Epoch 7: val_accuracy improved from 0.74422 to 0.76871, saving model to model_combination_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7971 - loss: 0.4475 - val_accuracy: 0.7687 - val_loss: 0.4763\n",
      "Epoch 8/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7948 - loss: 0.4494\n",
      "Epoch 8: val_accuracy did not improve from 0.76871\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7954 - loss: 0.4489 - val_accuracy: 0.7020 - val_loss: 0.5393\n",
      "Epoch 9/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8199 - loss: 0.4139\n",
      "Epoch 9: val_accuracy did not improve from 0.76871\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8200 - loss: 0.4138 - val_accuracy: 0.7619 - val_loss: 0.4776\n",
      "Epoch 10/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8309 - loss: 0.3816\n",
      "Epoch 10: val_accuracy did not improve from 0.76871\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8308 - loss: 0.3819 - val_accuracy: 0.7048 - val_loss: 0.5139\n",
      "Epoch 11/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8199 - loss: 0.3969\n",
      "Epoch 11: val_accuracy did not improve from 0.76871\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8200 - loss: 0.3967 - val_accuracy: 0.7565 - val_loss: 0.5039\n",
      "Epoch 12/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8347 - loss: 0.3775\n",
      "Epoch 12: val_accuracy did not improve from 0.76871\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8348 - loss: 0.3775 - val_accuracy: 0.7673 - val_loss: 0.4748\n",
      "Epoch 12: early stopping\n",
      "Restoring model weights from the end of the best epoch: 7.\n",
      "Combination ('HOG', 'Gabor') -> Test Accuracy: 0.7584\n",
      "Testing combination: ('HOG', 'LBP')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.5582 - loss: 1.2883\n",
      "Epoch 1: val_accuracy improved from -inf to 0.72381, saving model to model_combination_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 31ms/step - accuracy: 0.5588 - loss: 1.2840 - val_accuracy: 0.7238 - val_loss: 0.5395\n",
      "Epoch 2/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7074 - loss: 0.5676\n",
      "Epoch 2: val_accuracy improved from 0.72381 to 0.75646, saving model to model_combination_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7079 - loss: 0.5669 - val_accuracy: 0.7565 - val_loss: 0.4980\n",
      "Epoch 3/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7464 - loss: 0.5106\n",
      "Epoch 3: val_accuracy did not improve from 0.75646\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7468 - loss: 0.5100 - val_accuracy: 0.7565 - val_loss: 0.4843\n",
      "Epoch 4/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7917 - loss: 0.4644\n",
      "Epoch 4: val_accuracy improved from 0.75646 to 0.78095, saving model to model_combination_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7919 - loss: 0.4643 - val_accuracy: 0.7810 - val_loss: 0.4554\n",
      "Epoch 5/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8055 - loss: 0.4263\n",
      "Epoch 5: val_accuracy improved from 0.78095 to 0.79320, saving model to model_combination_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8058 - loss: 0.4258 - val_accuracy: 0.7932 - val_loss: 0.4474\n",
      "Epoch 6/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8248 - loss: 0.4005\n",
      "Epoch 6: val_accuracy did not improve from 0.79320\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8247 - loss: 0.4005 - val_accuracy: 0.7633 - val_loss: 0.4629\n",
      "Epoch 7/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8405 - loss: 0.3743\n",
      "Epoch 7: val_accuracy improved from 0.79320 to 0.79456, saving model to model_combination_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8405 - loss: 0.3743 - val_accuracy: 0.7946 - val_loss: 0.4461\n",
      "Epoch 8/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8415 - loss: 0.3703\n",
      "Epoch 8: val_accuracy did not improve from 0.79456\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8417 - loss: 0.3702 - val_accuracy: 0.7891 - val_loss: 0.4484\n",
      "Epoch 9/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8584 - loss: 0.3491\n",
      "Epoch 9: val_accuracy did not improve from 0.79456\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8580 - loss: 0.3497 - val_accuracy: 0.7823 - val_loss: 0.4618\n",
      "Epoch 10/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8695 - loss: 0.3182\n",
      "Epoch 10: val_accuracy improved from 0.79456 to 0.80816, saving model to model_combination_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8694 - loss: 0.3187 - val_accuracy: 0.8082 - val_loss: 0.4462\n",
      "Epoch 11/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8708 - loss: 0.3126\n",
      "Epoch 11: val_accuracy did not improve from 0.80816\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8706 - loss: 0.3134 - val_accuracy: 0.8027 - val_loss: 0.4439\n",
      "Epoch 12/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8573 - loss: 0.3330\n",
      "Epoch 12: val_accuracy did not improve from 0.80816\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8571 - loss: 0.3333 - val_accuracy: 0.8027 - val_loss: 0.4412\n",
      "Epoch 13/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8759 - loss: 0.3103\n",
      "Epoch 13: val_accuracy did not improve from 0.80816\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8755 - loss: 0.3106 - val_accuracy: 0.7986 - val_loss: 0.4456\n",
      "Epoch 14/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8892 - loss: 0.2977\n",
      "Epoch 14: val_accuracy did not improve from 0.80816\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8887 - loss: 0.2981 - val_accuracy: 0.8054 - val_loss: 0.4541\n",
      "Epoch 15/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8899 - loss: 0.2942\n",
      "Epoch 15: val_accuracy did not improve from 0.80816\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8897 - loss: 0.2943 - val_accuracy: 0.7959 - val_loss: 0.4559\n",
      "Epoch 15: early stopping\n",
      "Restoring model weights from the end of the best epoch: 10.\n",
      "Combination ('HOG', 'LBP') -> Test Accuracy: 0.7856\n",
      "Testing combination: ('HOG', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.6904 - loss: 1.2769\n",
      "Epoch 1: val_accuracy improved from -inf to 0.84762, saving model to model_combination_HOG_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 41ms/step - accuracy: 0.6910 - loss: 1.2724 - val_accuracy: 0.8476 - val_loss: 0.3692\n",
      "Epoch 2/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8310 - loss: 0.3732\n",
      "Epoch 2: val_accuracy did not improve from 0.84762\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8317 - loss: 0.3724 - val_accuracy: 0.8449 - val_loss: 0.3399\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8869 - loss: 0.2872\n",
      "Epoch 3: val_accuracy did not improve from 0.84762\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8869 - loss: 0.2871 - val_accuracy: 0.8435 - val_loss: 0.3321\n",
      "Epoch 4/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8957 - loss: 0.2440\n",
      "Epoch 4: val_accuracy improved from 0.84762 to 0.85170, saving model to model_combination_HOG_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.8957 - loss: 0.2440 - val_accuracy: 0.8517 - val_loss: 0.3206\n",
      "Epoch 5/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9172 - loss: 0.2064\n",
      "Epoch 5: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9174 - loss: 0.2061 - val_accuracy: 0.8395 - val_loss: 0.3754\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9432 - loss: 0.1517\n",
      "Epoch 6: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9433 - loss: 0.1516 - val_accuracy: 0.8163 - val_loss: 0.4470\n",
      "Epoch 7/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9521 - loss: 0.1262\n",
      "Epoch 7: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9520 - loss: 0.1262 - val_accuracy: 0.8122 - val_loss: 0.5025\n",
      "Epoch 8/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9576 - loss: 0.1184\n",
      "Epoch 8: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9576 - loss: 0.1183 - val_accuracy: 0.8327 - val_loss: 0.4402\n",
      "Epoch 9/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9573 - loss: 0.1050\n",
      "Epoch 9: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9559 - loss: 0.1082 - val_accuracy: 0.8381 - val_loss: 0.4097\n",
      "Epoch 9: early stopping\n",
      "Restoring model weights from the end of the best epoch: 4.\n",
      "Combination ('HOG', 'SIFT') -> Test Accuracy: 0.8487\n",
      "Testing combination: ('HOG', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.5596 - loss: 1.0703\n",
      "Epoch 1: val_accuracy improved from -inf to 0.72517, saving model to model_combination_HOG_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 32ms/step - accuracy: 0.5601 - loss: 1.0681 - val_accuracy: 0.7252 - val_loss: 0.5643\n",
      "Epoch 2/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6903 - loss: 0.5928\n",
      "Epoch 2: val_accuracy did not improve from 0.72517\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6906 - loss: 0.5919 - val_accuracy: 0.7238 - val_loss: 0.5287\n",
      "Epoch 3/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7595 - loss: 0.5236\n",
      "Epoch 3: val_accuracy improved from 0.72517 to 0.75102, saving model to model_combination_HOG_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7594 - loss: 0.5233 - val_accuracy: 0.7510 - val_loss: 0.5015\n",
      "Epoch 4/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7727 - loss: 0.4834\n",
      "Epoch 4: val_accuracy improved from 0.75102 to 0.75782, saving model to model_combination_HOG_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7725 - loss: 0.4835 - val_accuracy: 0.7578 - val_loss: 0.4849\n",
      "Epoch 5/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7663 - loss: 0.4778\n",
      "Epoch 5: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7669 - loss: 0.4772 - val_accuracy: 0.7415 - val_loss: 0.4935\n",
      "Epoch 6/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7951 - loss: 0.4405\n",
      "Epoch 6: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7952 - loss: 0.4408 - val_accuracy: 0.7565 - val_loss: 0.4801\n",
      "Epoch 7/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8147 - loss: 0.4221\n",
      "Epoch 7: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8147 - loss: 0.4218 - val_accuracy: 0.7075 - val_loss: 0.5365\n",
      "Epoch 8/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8209 - loss: 0.3942\n",
      "Epoch 8: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8212 - loss: 0.3941 - val_accuracy: 0.7279 - val_loss: 0.5132\n",
      "Epoch 9/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8174 - loss: 0.3833\n",
      "Epoch 9: val_accuracy did not improve from 0.75782\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8177 - loss: 0.3839 - val_accuracy: 0.7524 - val_loss: 0.4899\n",
      "Epoch 9: early stopping\n",
      "Restoring model weights from the end of the best epoch: 4.\n",
      "Combination ('HOG', 'Contour') -> Test Accuracy: 0.7399\n",
      "Testing combination: ('Gabor', 'LBP')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.4942 - loss: 1.9001\n",
      "Epoch 1: val_accuracy improved from -inf to 0.67891, saving model to model_combination_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 29ms/step - accuracy: 0.4946 - loss: 1.8941 - val_accuracy: 0.6789 - val_loss: 0.5848\n",
      "Epoch 2/20\n",
      "\u001b[1m67/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5949 - loss: 0.7504\n",
      "Epoch 2: val_accuracy improved from 0.67891 to 0.69116, saving model to model_combination_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6043 - loss: 0.7336 - val_accuracy: 0.6912 - val_loss: 0.5679\n",
      "Epoch 3/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.6905 - loss: 0.5767\n",
      "Epoch 3: val_accuracy improved from 0.69116 to 0.70884, saving model to model_combination_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6906 - loss: 0.5772 - val_accuracy: 0.7088 - val_loss: 0.5542\n",
      "Epoch 4/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7066 - loss: 0.5499\n",
      "Epoch 4: val_accuracy improved from 0.70884 to 0.71837, saving model to model_combination_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7060 - loss: 0.5512 - val_accuracy: 0.7184 - val_loss: 0.5414\n",
      "Epoch 5/20\n",
      "\u001b[1m76/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7189 - loss: 0.5502\n",
      "Epoch 5: val_accuracy did not improve from 0.71837\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7193 - loss: 0.5505 - val_accuracy: 0.7129 - val_loss: 0.5425\n",
      "Epoch 6/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7195 - loss: 0.5366\n",
      "Epoch 6: val_accuracy did not improve from 0.71837\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7184 - loss: 0.5392 - val_accuracy: 0.7156 - val_loss: 0.5505\n",
      "Epoch 7/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7198 - loss: 0.5313\n",
      "Epoch 7: val_accuracy did not improve from 0.71837\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7200 - loss: 0.5327 - val_accuracy: 0.7184 - val_loss: 0.5389\n",
      "Epoch 8/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7314 - loss: 0.5292\n",
      "Epoch 8: val_accuracy improved from 0.71837 to 0.73061, saving model to model_combination_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7311 - loss: 0.5304 - val_accuracy: 0.7306 - val_loss: 0.5466\n",
      "Epoch 9/20\n",
      "\u001b[1m75/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7330 - loss: 0.5237\n",
      "Epoch 9: val_accuracy did not improve from 0.73061\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7321 - loss: 0.5246 - val_accuracy: 0.7265 - val_loss: 0.5329\n",
      "Epoch 10/20\n",
      "\u001b[1m74/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7411 - loss: 0.5135\n",
      "Epoch 10: val_accuracy did not improve from 0.73061\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7398 - loss: 0.5156 - val_accuracy: 0.7265 - val_loss: 0.5484\n",
      "Epoch 11/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7377 - loss: 0.5096\n",
      "Epoch 11: val_accuracy did not improve from 0.73061\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7365 - loss: 0.5119 - val_accuracy: 0.7279 - val_loss: 0.5452\n",
      "Epoch 12/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7377 - loss: 0.5124\n",
      "Epoch 12: val_accuracy did not improve from 0.73061\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7371 - loss: 0.5145 - val_accuracy: 0.7184 - val_loss: 0.5498\n",
      "Epoch 13/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7296 - loss: 0.5181\n",
      "Epoch 13: val_accuracy did not improve from 0.73061\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7290 - loss: 0.5190 - val_accuracy: 0.7265 - val_loss: 0.5420\n",
      "Epoch 13: early stopping\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Combination ('Gabor', 'LBP') -> Test Accuracy: 0.7291\n",
      "Testing combination: ('Gabor', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.6980 - loss: 0.8997\n",
      "Epoch 1: val_accuracy improved from -inf to 0.84082, saving model to model_combination_Gabor_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 34ms/step - accuracy: 0.6986 - loss: 0.8971 - val_accuracy: 0.8408 - val_loss: 0.3724\n",
      "Epoch 2/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8399 - loss: 0.3588\n",
      "Epoch 2: val_accuracy did not improve from 0.84082\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8400 - loss: 0.3588 - val_accuracy: 0.8082 - val_loss: 0.3990\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8808 - loss: 0.2854\n",
      "Epoch 3: val_accuracy did not improve from 0.84082\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8807 - loss: 0.2855 - val_accuracy: 0.8150 - val_loss: 0.3815\n",
      "Epoch 4/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9058 - loss: 0.2351\n",
      "Epoch 4: val_accuracy did not improve from 0.84082\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9050 - loss: 0.2359 - val_accuracy: 0.8286 - val_loss: 0.3818\n",
      "Epoch 5/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9322 - loss: 0.1852\n",
      "Epoch 5: val_accuracy did not improve from 0.84082\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9316 - loss: 0.1862 - val_accuracy: 0.7959 - val_loss: 0.4497\n",
      "Epoch 6/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9425 - loss: 0.1569\n",
      "Epoch 6: val_accuracy did not improve from 0.84082\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9415 - loss: 0.1582 - val_accuracy: 0.8082 - val_loss: 0.4511\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('Gabor', 'SIFT') -> Test Accuracy: 0.8248\n",
      "Testing combination: ('Gabor', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - accuracy: 0.4944 - loss: 1.8790\n",
      "Epoch 1: val_accuracy improved from -inf to 0.50068, saving model to model_combination_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 28ms/step - accuracy: 0.4945 - loss: 1.8748 - val_accuracy: 0.5007 - val_loss: 0.6969\n",
      "Epoch 2/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5122 - loss: 0.9410\n",
      "Epoch 2: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5124 - loss: 0.9240 - val_accuracy: 0.5007 - val_loss: 0.6971\n",
      "Epoch 3/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5157 - loss: 0.7512\n",
      "Epoch 3: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5157 - loss: 0.7478 - val_accuracy: 0.5007 - val_loss: 0.6974\n",
      "Epoch 4/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5176 - loss: 0.7206\n",
      "Epoch 4: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5148 - loss: 0.7198 - val_accuracy: 0.5007 - val_loss: 0.6954\n",
      "Epoch 5/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5116 - loss: 0.7074\n",
      "Epoch 5: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5105 - loss: 0.7073 - val_accuracy: 0.4980 - val_loss: 0.6926\n",
      "Epoch 6/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.4966 - loss: 0.7050\n",
      "Epoch 6: val_accuracy did not improve from 0.50068\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4958 - loss: 0.7048 - val_accuracy: 0.4993 - val_loss: 0.6934\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('Gabor', 'Contour') -> Test Accuracy: 0.5005\n",
      "Testing combination: ('LBP', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.7230 - loss: 0.8435\n",
      "Epoch 1: val_accuracy improved from -inf to 0.83946, saving model to model_combination_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 34ms/step - accuracy: 0.7236 - loss: 0.8410 - val_accuracy: 0.8395 - val_loss: 0.3708\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8385 - loss: 0.3642\n",
      "Epoch 2: val_accuracy did not improve from 0.83946\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8387 - loss: 0.3640 - val_accuracy: 0.8041 - val_loss: 0.3950\n",
      "Epoch 3/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8901 - loss: 0.2729\n",
      "Epoch 3: val_accuracy did not improve from 0.83946\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8890 - loss: 0.2739 - val_accuracy: 0.8068 - val_loss: 0.3960\n",
      "Epoch 4/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9019 - loss: 0.2335\n",
      "Epoch 4: val_accuracy did not improve from 0.83946\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9021 - loss: 0.2345 - val_accuracy: 0.8218 - val_loss: 0.3891\n",
      "Epoch 5/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9183 - loss: 0.1783\n",
      "Epoch 5: val_accuracy improved from 0.83946 to 0.84898, saving model to model_combination_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.9181 - loss: 0.1806 - val_accuracy: 0.8490 - val_loss: 0.3537\n",
      "Epoch 6/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9210 - loss: 0.1846\n",
      "Epoch 6: val_accuracy did not improve from 0.84898\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9212 - loss: 0.1842 - val_accuracy: 0.8449 - val_loss: 0.3720\n",
      "Epoch 7/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9177 - loss: 0.1931\n",
      "Epoch 7: val_accuracy improved from 0.84898 to 0.85714, saving model to model_combination_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.9164 - loss: 0.1957 - val_accuracy: 0.8571 - val_loss: 0.3624\n",
      "Epoch 8/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9365 - loss: 0.1480\n",
      "Epoch 8: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9357 - loss: 0.1499 - val_accuracy: 0.8449 - val_loss: 0.4113\n",
      "Epoch 9/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9484 - loss: 0.1272\n",
      "Epoch 9: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9475 - loss: 0.1288 - val_accuracy: 0.8313 - val_loss: 0.4870\n",
      "Epoch 10/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9514 - loss: 0.1268\n",
      "Epoch 10: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9521 - loss: 0.1256 - val_accuracy: 0.8381 - val_loss: 0.4645\n",
      "Epoch 11/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9587 - loss: 0.1068\n",
      "Epoch 11: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9594 - loss: 0.1057 - val_accuracy: 0.8463 - val_loss: 0.4397\n",
      "Epoch 12/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9560 - loss: 0.0985\n",
      "Epoch 12: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9569 - loss: 0.0977 - val_accuracy: 0.8463 - val_loss: 0.5323\n",
      "Epoch 12: early stopping\n",
      "Restoring model weights from the end of the best epoch: 7.\n",
      "Combination ('LBP', 'SIFT') -> Test Accuracy: 0.8400\n",
      "Testing combination: ('LBP', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - accuracy: 0.6213 - loss: 0.7428\n",
      "Epoch 1: val_accuracy improved from -inf to 0.70476, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 28ms/step - accuracy: 0.6219 - loss: 0.7416 - val_accuracy: 0.7048 - val_loss: 0.5496\n",
      "Epoch 2/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7338 - loss: 0.5337\n",
      "Epoch 2: val_accuracy improved from 0.70476 to 0.72245, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7325 - loss: 0.5344 - val_accuracy: 0.7224 - val_loss: 0.5220\n",
      "Epoch 3/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7499 - loss: 0.5085\n",
      "Epoch 3: val_accuracy improved from 0.72245 to 0.73197, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7488 - loss: 0.5092 - val_accuracy: 0.7320 - val_loss: 0.5046\n",
      "Epoch 4/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7509 - loss: 0.5017\n",
      "Epoch 4: val_accuracy improved from 0.73197 to 0.74558, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7504 - loss: 0.5023 - val_accuracy: 0.7456 - val_loss: 0.4928\n",
      "Epoch 5/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7676 - loss: 0.4767\n",
      "Epoch 5: val_accuracy improved from 0.74558 to 0.75374, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7663 - loss: 0.4780 - val_accuracy: 0.7537 - val_loss: 0.4830\n",
      "Epoch 6/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7610 - loss: 0.4750\n",
      "Epoch 6: val_accuracy improved from 0.75374 to 0.77007, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7612 - loss: 0.4761 - val_accuracy: 0.7701 - val_loss: 0.4761\n",
      "Epoch 7/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7617 - loss: 0.4762\n",
      "Epoch 7: val_accuracy did not improve from 0.77007\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7609 - loss: 0.4768 - val_accuracy: 0.7701 - val_loss: 0.4714\n",
      "Epoch 8/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7645 - loss: 0.4728\n",
      "Epoch 8: val_accuracy improved from 0.77007 to 0.77143, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7636 - loss: 0.4736 - val_accuracy: 0.7714 - val_loss: 0.4669\n",
      "Epoch 9/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7620 - loss: 0.4670\n",
      "Epoch 9: val_accuracy improved from 0.77143 to 0.78231, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7626 - loss: 0.4675 - val_accuracy: 0.7823 - val_loss: 0.4600\n",
      "Epoch 10/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7661 - loss: 0.4593\n",
      "Epoch 10: val_accuracy did not improve from 0.78231\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7664 - loss: 0.4602 - val_accuracy: 0.7823 - val_loss: 0.4569\n",
      "Epoch 11/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7769 - loss: 0.4544\n",
      "Epoch 11: val_accuracy improved from 0.78231 to 0.78639, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7767 - loss: 0.4562 - val_accuracy: 0.7864 - val_loss: 0.4555\n",
      "Epoch 12/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7779 - loss: 0.4557\n",
      "Epoch 12: val_accuracy improved from 0.78639 to 0.78776, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7768 - loss: 0.4571 - val_accuracy: 0.7878 - val_loss: 0.4535\n",
      "Epoch 13/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7695 - loss: 0.4538\n",
      "Epoch 13: val_accuracy improved from 0.78776 to 0.79048, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7700 - loss: 0.4550 - val_accuracy: 0.7905 - val_loss: 0.4511\n",
      "Epoch 14/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7820 - loss: 0.4480\n",
      "Epoch 14: val_accuracy improved from 0.79048 to 0.79184, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7811 - loss: 0.4490 - val_accuracy: 0.7918 - val_loss: 0.4499\n",
      "Epoch 15/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7768 - loss: 0.4463\n",
      "Epoch 15: val_accuracy improved from 0.79184 to 0.79728, saving model to model_combination_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7764 - loss: 0.4474 - val_accuracy: 0.7973 - val_loss: 0.4466\n",
      "Epoch 16/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7742 - loss: 0.4449\n",
      "Epoch 16: val_accuracy did not improve from 0.79728\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7744 - loss: 0.4469 - val_accuracy: 0.7973 - val_loss: 0.4459\n",
      "Epoch 17/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7819 - loss: 0.4414\n",
      "Epoch 17: val_accuracy did not improve from 0.79728\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7813 - loss: 0.4430 - val_accuracy: 0.7905 - val_loss: 0.4452\n",
      "Epoch 18/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7801 - loss: 0.4418\n",
      "Epoch 18: val_accuracy did not improve from 0.79728\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7800 - loss: 0.4431 - val_accuracy: 0.7864 - val_loss: 0.4438\n",
      "Epoch 19/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7894 - loss: 0.4390\n",
      "Epoch 19: val_accuracy did not improve from 0.79728\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7884 - loss: 0.4408 - val_accuracy: 0.7918 - val_loss: 0.4429\n",
      "Epoch 20/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7860 - loss: 0.4355\n",
      "Epoch 20: val_accuracy did not improve from 0.79728\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7853 - loss: 0.4371 - val_accuracy: 0.7946 - val_loss: 0.4435\n",
      "Epoch 20: early stopping\n",
      "Restoring model weights from the end of the best epoch: 15.\n",
      "Combination ('LBP', 'Contour') -> Test Accuracy: 0.7889\n",
      "Testing combination: ('SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.7346 - loss: 0.8366\n",
      "Epoch 1: val_accuracy improved from -inf to 0.82041, saving model to model_combination_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 35ms/step - accuracy: 0.7351 - loss: 0.8341 - val_accuracy: 0.8204 - val_loss: 0.3960\n",
      "Epoch 2/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8480 - loss: 0.3532\n",
      "Epoch 2: val_accuracy did not improve from 0.82041\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8479 - loss: 0.3536 - val_accuracy: 0.8204 - val_loss: 0.3833\n",
      "Epoch 3/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8826 - loss: 0.2797\n",
      "Epoch 3: val_accuracy improved from 0.82041 to 0.84354, saving model to model_combination_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.8818 - loss: 0.2806 - val_accuracy: 0.8435 - val_loss: 0.3560\n",
      "Epoch 4/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9017 - loss: 0.2259\n",
      "Epoch 4: val_accuracy did not improve from 0.84354\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9022 - loss: 0.2264 - val_accuracy: 0.8435 - val_loss: 0.3636\n",
      "Epoch 5/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9221 - loss: 0.1953\n",
      "Epoch 5: val_accuracy improved from 0.84354 to 0.84762, saving model to model_combination_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - accuracy: 0.9224 - loss: 0.1955 - val_accuracy: 0.8476 - val_loss: 0.3662\n",
      "Epoch 6/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9295 - loss: 0.1823\n",
      "Epoch 6: val_accuracy did not improve from 0.84762\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9303 - loss: 0.1809 - val_accuracy: 0.8381 - val_loss: 0.4590\n",
      "Epoch 7/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9065 - loss: 0.2163\n",
      "Epoch 7: val_accuracy improved from 0.84762 to 0.85170, saving model to model_combination_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.9085 - loss: 0.2125 - val_accuracy: 0.8517 - val_loss: 0.3934\n",
      "Epoch 8/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9233 - loss: 0.1690\n",
      "Epoch 8: val_accuracy improved from 0.85170 to 0.85714, saving model to model_combination_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.9234 - loss: 0.1695 - val_accuracy: 0.8571 - val_loss: 0.3883\n",
      "Epoch 9/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9487 - loss: 0.1348\n",
      "Epoch 9: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9468 - loss: 0.1379 - val_accuracy: 0.8395 - val_loss: 0.4493\n",
      "Epoch 10/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9512 - loss: 0.1288\n",
      "Epoch 10: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9512 - loss: 0.1289 - val_accuracy: 0.8395 - val_loss: 0.4530\n",
      "Epoch 11/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9607 - loss: 0.1094\n",
      "Epoch 11: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9606 - loss: 0.1090 - val_accuracy: 0.8463 - val_loss: 0.4564\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9738 - loss: 0.0778\n",
      "Epoch 12: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9738 - loss: 0.0779 - val_accuracy: 0.8381 - val_loss: 0.4541\n",
      "Epoch 13/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9793 - loss: 0.0570\n",
      "Epoch 13: val_accuracy did not improve from 0.85714\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9793 - loss: 0.0572 - val_accuracy: 0.8367 - val_loss: 0.5864\n",
      "Epoch 13: early stopping\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Combination ('SIFT', 'Contour') -> Test Accuracy: 0.8368\n",
      "Testing combination: ('CNN', 'HOG', 'Gabor')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 223ms/step - accuracy: 0.7905 - loss: 0.8006\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94150, saving model to model_combination_CNN_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 257ms/step - accuracy: 0.7917 - loss: 0.7963 - val_accuracy: 0.9415 - val_loss: 0.1434\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9468 - loss: 0.1747\n",
      "Epoch 2: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9469 - loss: 0.1743 - val_accuracy: 0.9415 - val_loss: 0.1462\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9537 - loss: 0.1405\n",
      "Epoch 3: val_accuracy improved from 0.94150 to 0.94558, saving model to model_combination_CNN_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9537 - loss: 0.1404 - val_accuracy: 0.9456 - val_loss: 0.1407\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9553 - loss: 0.1294\n",
      "Epoch 4: val_accuracy improved from 0.94558 to 0.94694, saving model to model_combination_CNN_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 35ms/step - accuracy: 0.9554 - loss: 0.1293 - val_accuracy: 0.9469 - val_loss: 0.1532\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9626 - loss: 0.1101\n",
      "Epoch 5: val_accuracy improved from 0.94694 to 0.94830, saving model to model_combination_CNN_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9627 - loss: 0.1101 - val_accuracy: 0.9483 - val_loss: 0.1305\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9638 - loss: 0.1044\n",
      "Epoch 6: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9639 - loss: 0.1043 - val_accuracy: 0.9429 - val_loss: 0.1569\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9691 - loss: 0.0946\n",
      "Epoch 7: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9691 - loss: 0.0946 - val_accuracy: 0.9456 - val_loss: 0.1599\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9653 - loss: 0.1008\n",
      "Epoch 8: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9653 - loss: 0.1006 - val_accuracy: 0.9415 - val_loss: 0.1450\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9665 - loss: 0.0884\n",
      "Epoch 9: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9665 - loss: 0.0884 - val_accuracy: 0.9320 - val_loss: 0.1737\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9719 - loss: 0.0853\n",
      "Epoch 10: val_accuracy improved from 0.94830 to 0.94966, saving model to model_combination_CNN_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9719 - loss: 0.0851 - val_accuracy: 0.9497 - val_loss: 0.1280\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9708 - loss: 0.0789\n",
      "Epoch 11: val_accuracy improved from 0.94966 to 0.95238, saving model to model_combination_CNN_HOG_Gabor.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9708 - loss: 0.0791 - val_accuracy: 0.9524 - val_loss: 0.1335\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9747 - loss: 0.0810\n",
      "Epoch 12: val_accuracy did not improve from 0.95238\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9747 - loss: 0.0811 - val_accuracy: 0.9456 - val_loss: 0.1478\n",
      "Epoch 13/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9674 - loss: 0.0868\n",
      "Epoch 13: val_accuracy did not improve from 0.95238\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9675 - loss: 0.0866 - val_accuracy: 0.9442 - val_loss: 0.1520\n",
      "Epoch 14/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9743 - loss: 0.0743\n",
      "Epoch 14: val_accuracy did not improve from 0.95238\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9742 - loss: 0.0743 - val_accuracy: 0.9401 - val_loss: 0.1550\n",
      "Epoch 15/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9776 - loss: 0.0672\n",
      "Epoch 15: val_accuracy did not improve from 0.95238\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9775 - loss: 0.0673 - val_accuracy: 0.9469 - val_loss: 0.1689\n",
      "Epoch 16/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9724 - loss: 0.0766\n",
      "Epoch 16: val_accuracy did not improve from 0.95238\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9725 - loss: 0.0764 - val_accuracy: 0.9442 - val_loss: 0.1523\n",
      "Epoch 16: early stopping\n",
      "Restoring model weights from the end of the best epoch: 11.\n",
      "Combination ('CNN', 'HOG', 'Gabor') -> Test Accuracy: 0.9630\n",
      "Testing combination: ('CNN', 'HOG', 'LBP')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 221ms/step - accuracy: 0.8425 - loss: 0.5795\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93469, saving model to model_combination_CNN_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 253ms/step - accuracy: 0.8433 - loss: 0.5769 - val_accuracy: 0.9347 - val_loss: 0.1753\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9499 - loss: 0.1650\n",
      "Epoch 2: val_accuracy did not improve from 0.93469\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9500 - loss: 0.1647 - val_accuracy: 0.9238 - val_loss: 0.1859\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9604 - loss: 0.1284\n",
      "Epoch 3: val_accuracy improved from 0.93469 to 0.94422, saving model to model_combination_CNN_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - accuracy: 0.9604 - loss: 0.1283 - val_accuracy: 0.9442 - val_loss: 0.1368\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9564 - loss: 0.1230\n",
      "Epoch 4: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9566 - loss: 0.1227 - val_accuracy: 0.9388 - val_loss: 0.1517\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9615 - loss: 0.0972\n",
      "Epoch 5: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9616 - loss: 0.0972 - val_accuracy: 0.9401 - val_loss: 0.1373\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9643 - loss: 0.1023\n",
      "Epoch 6: val_accuracy improved from 0.94422 to 0.94694, saving model to model_combination_CNN_HOG_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9643 - loss: 0.1022 - val_accuracy: 0.9469 - val_loss: 0.1402\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9688 - loss: 0.0946\n",
      "Epoch 7: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9688 - loss: 0.0945 - val_accuracy: 0.9388 - val_loss: 0.1583\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9748 - loss: 0.0893\n",
      "Epoch 8: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9748 - loss: 0.0892 - val_accuracy: 0.9374 - val_loss: 0.1706\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9760 - loss: 0.0723\n",
      "Epoch 9: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9760 - loss: 0.0721 - val_accuracy: 0.9415 - val_loss: 0.1589\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9725 - loss: 0.0790\n",
      "Epoch 10: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9725 - loss: 0.0791 - val_accuracy: 0.9374 - val_loss: 0.1759\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9766 - loss: 0.0657\n",
      "Epoch 11: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9767 - loss: 0.0657 - val_accuracy: 0.9238 - val_loss: 0.2127\n",
      "Epoch 11: early stopping\n",
      "Restoring model weights from the end of the best epoch: 6.\n",
      "Combination ('CNN', 'HOG', 'LBP') -> Test Accuracy: 0.9641\n",
      "Testing combination: ('CNN', 'HOG', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step - accuracy: 0.8392 - loss: 1.0896\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94422, saving model to model_combination_CNN_HOG_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 267ms/step - accuracy: 0.8399 - loss: 1.0842 - val_accuracy: 0.9442 - val_loss: 0.1453\n",
      "Epoch 2/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9583 - loss: 0.1349\n",
      "Epoch 2: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9584 - loss: 0.1348 - val_accuracy: 0.9388 - val_loss: 0.1535\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9685 - loss: 0.0936\n",
      "Epoch 3: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9686 - loss: 0.0936 - val_accuracy: 0.9361 - val_loss: 0.1460\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9663 - loss: 0.0959\n",
      "Epoch 4: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9665 - loss: 0.0956 - val_accuracy: 0.9361 - val_loss: 0.1878\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9847 - loss: 0.0505\n",
      "Epoch 5: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9847 - loss: 0.0506 - val_accuracy: 0.9265 - val_loss: 0.2359\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9817 - loss: 0.0491\n",
      "Epoch 6: val_accuracy improved from 0.94422 to 0.95510, saving model to model_combination_CNN_HOG_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 43ms/step - accuracy: 0.9816 - loss: 0.0490 - val_accuracy: 0.9551 - val_loss: 0.1367\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9813 - loss: 0.0618\n",
      "Epoch 7: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9813 - loss: 0.0616 - val_accuracy: 0.9497 - val_loss: 0.1498\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9896 - loss: 0.0314\n",
      "Epoch 8: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9896 - loss: 0.0314 - val_accuracy: 0.9361 - val_loss: 0.2285\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9844 - loss: 0.0463\n",
      "Epoch 9: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9845 - loss: 0.0460 - val_accuracy: 0.9497 - val_loss: 0.1656\n",
      "Epoch 10/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9893 - loss: 0.0307\n",
      "Epoch 10: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9893 - loss: 0.0307 - val_accuracy: 0.9497 - val_loss: 0.1825\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9866 - loss: 0.0597\n",
      "Epoch 11: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9866 - loss: 0.0595 - val_accuracy: 0.9456 - val_loss: 0.1936\n",
      "Epoch 11: early stopping\n",
      "Restoring model weights from the end of the best epoch: 6.\n",
      "Combination ('CNN', 'HOG', 'SIFT') -> Test Accuracy: 0.9641\n",
      "Testing combination: ('CNN', 'HOG', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 223ms/step - accuracy: 0.8541 - loss: 0.6284\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93878, saving model to model_combination_CNN_HOG_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 256ms/step - accuracy: 0.8549 - loss: 0.6251 - val_accuracy: 0.9388 - val_loss: 0.1560\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9521 - loss: 0.1537\n",
      "Epoch 2: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9522 - loss: 0.1535 - val_accuracy: 0.9333 - val_loss: 0.1594\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9528 - loss: 0.1384\n",
      "Epoch 3: val_accuracy improved from 0.93878 to 0.94830, saving model to model_combination_CNN_HOG_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9529 - loss: 0.1383 - val_accuracy: 0.9483 - val_loss: 0.1312\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9622 - loss: 0.1162\n",
      "Epoch 4: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9622 - loss: 0.1162 - val_accuracy: 0.9429 - val_loss: 0.1392\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9690 - loss: 0.0870\n",
      "Epoch 5: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9691 - loss: 0.0870 - val_accuracy: 0.9347 - val_loss: 0.1556\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9626 - loss: 0.1036\n",
      "Epoch 6: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9627 - loss: 0.1035 - val_accuracy: 0.9456 - val_loss: 0.1357\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9731 - loss: 0.0867\n",
      "Epoch 7: val_accuracy did not improve from 0.94830\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9731 - loss: 0.0866 - val_accuracy: 0.9483 - val_loss: 0.1266\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9688 - loss: 0.0887\n",
      "Epoch 8: val_accuracy improved from 0.94830 to 0.95374, saving model to model_combination_CNN_HOG_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9688 - loss: 0.0886 - val_accuracy: 0.9537 - val_loss: 0.1270\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9758 - loss: 0.0847\n",
      "Epoch 9: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9757 - loss: 0.0846 - val_accuracy: 0.9483 - val_loss: 0.1437\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9799 - loss: 0.0661\n",
      "Epoch 10: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9798 - loss: 0.0661 - val_accuracy: 0.9469 - val_loss: 0.1361\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9783 - loss: 0.0683\n",
      "Epoch 11: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9783 - loss: 0.0683 - val_accuracy: 0.9497 - val_loss: 0.1422\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9802 - loss: 0.0660\n",
      "Epoch 12: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9802 - loss: 0.0662 - val_accuracy: 0.9524 - val_loss: 0.1288\n",
      "Epoch 13/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9824 - loss: 0.0658\n",
      "Epoch 13: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9824 - loss: 0.0657 - val_accuracy: 0.9537 - val_loss: 0.1407\n",
      "Epoch 13: early stopping\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Combination ('CNN', 'HOG', 'Contour') -> Test Accuracy: 0.9630\n",
      "Testing combination: ('CNN', 'Gabor', 'LBP')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 223ms/step - accuracy: 0.9085 - loss: 0.3032\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93878, saving model to model_combination_CNN_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 252ms/step - accuracy: 0.9088 - loss: 0.3026 - val_accuracy: 0.9388 - val_loss: 0.1750\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9491 - loss: 0.1782\n",
      "Epoch 2: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9492 - loss: 0.1779 - val_accuracy: 0.9320 - val_loss: 0.1651\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9523 - loss: 0.1473\n",
      "Epoch 3: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9524 - loss: 0.1473 - val_accuracy: 0.9224 - val_loss: 0.1936\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9580 - loss: 0.1366\n",
      "Epoch 4: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9580 - loss: 0.1366 - val_accuracy: 0.9333 - val_loss: 0.1778\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9599 - loss: 0.1223\n",
      "Epoch 5: val_accuracy improved from 0.93878 to 0.94422, saving model to model_combination_CNN_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 29ms/step - accuracy: 0.9600 - loss: 0.1222 - val_accuracy: 0.9442 - val_loss: 0.1577\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9570 - loss: 0.1270\n",
      "Epoch 6: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9570 - loss: 0.1271 - val_accuracy: 0.9075 - val_loss: 0.2151\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9596 - loss: 0.1186\n",
      "Epoch 7: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9596 - loss: 0.1188 - val_accuracy: 0.9374 - val_loss: 0.1619\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9632 - loss: 0.1149\n",
      "Epoch 8: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9632 - loss: 0.1149 - val_accuracy: 0.9374 - val_loss: 0.1610\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9593 - loss: 0.1119\n",
      "Epoch 9: val_accuracy improved from 0.94422 to 0.95102, saving model to model_combination_CNN_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - accuracy: 0.9593 - loss: 0.1119 - val_accuracy: 0.9510 - val_loss: 0.1459\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9597 - loss: 0.1195\n",
      "Epoch 10: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9598 - loss: 0.1194 - val_accuracy: 0.9388 - val_loss: 0.1534\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9640 - loss: 0.1193\n",
      "Epoch 11: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9640 - loss: 0.1192 - val_accuracy: 0.9442 - val_loss: 0.1462\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9644 - loss: 0.1077\n",
      "Epoch 12: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9644 - loss: 0.1078 - val_accuracy: 0.9320 - val_loss: 0.1773\n",
      "Epoch 13/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9673 - loss: 0.0997\n",
      "Epoch 13: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9674 - loss: 0.0996 - val_accuracy: 0.9456 - val_loss: 0.1409\n",
      "Epoch 14/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9658 - loss: 0.1080\n",
      "Epoch 14: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9658 - loss: 0.1078 - val_accuracy: 0.9483 - val_loss: 0.1382\n",
      "Epoch 14: early stopping\n",
      "Restoring model weights from the end of the best epoch: 9.\n",
      "Combination ('CNN', 'Gabor', 'LBP') -> Test Accuracy: 0.9619\n",
      "Testing combination: ('CNN', 'Gabor', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 227ms/step - accuracy: 0.8390 - loss: 0.5400\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94966, saving model to model_combination_CNN_Gabor_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 264ms/step - accuracy: 0.8397 - loss: 0.5380 - val_accuracy: 0.9497 - val_loss: 0.1383\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9562 - loss: 0.1563\n",
      "Epoch 2: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9562 - loss: 0.1560 - val_accuracy: 0.9456 - val_loss: 0.1491\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9705 - loss: 0.0846\n",
      "Epoch 3: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9705 - loss: 0.0846 - val_accuracy: 0.9374 - val_loss: 0.1655\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9703 - loss: 0.0886\n",
      "Epoch 4: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9704 - loss: 0.0884 - val_accuracy: 0.9374 - val_loss: 0.1721\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9716 - loss: 0.0846\n",
      "Epoch 5: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9717 - loss: 0.0842 - val_accuracy: 0.9238 - val_loss: 0.3173\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9822 - loss: 0.0535\n",
      "Epoch 6: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9821 - loss: 0.0534 - val_accuracy: 0.9374 - val_loss: 0.1731\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('CNN', 'Gabor', 'SIFT') -> Test Accuracy: 0.9663\n",
      "Testing combination: ('CNN', 'Gabor', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 222ms/step - accuracy: 0.8833 - loss: 0.3388\n",
      "Epoch 1: val_accuracy improved from -inf to 0.92245, saving model to model_combination_CNN_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 252ms/step - accuracy: 0.8838 - loss: 0.3377 - val_accuracy: 0.9224 - val_loss: 0.2038\n",
      "Epoch 2/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9466 - loss: 0.1695\n",
      "Epoch 2: val_accuracy improved from 0.92245 to 0.93469, saving model to model_combination_CNN_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 31ms/step - accuracy: 0.9467 - loss: 0.1695 - val_accuracy: 0.9347 - val_loss: 0.1765\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9569 - loss: 0.1497\n",
      "Epoch 3: val_accuracy did not improve from 0.93469\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9569 - loss: 0.1497 - val_accuracy: 0.9333 - val_loss: 0.1732\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9596 - loss: 0.1260\n",
      "Epoch 4: val_accuracy did not improve from 0.93469\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9596 - loss: 0.1262 - val_accuracy: 0.9347 - val_loss: 0.1851\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9605 - loss: 0.1158\n",
      "Epoch 5: val_accuracy did not improve from 0.93469\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9605 - loss: 0.1158 - val_accuracy: 0.9306 - val_loss: 0.1675\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9582 - loss: 0.1335\n",
      "Epoch 6: val_accuracy did not improve from 0.93469\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9582 - loss: 0.1332 - val_accuracy: 0.9333 - val_loss: 0.1772\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9630 - loss: 0.1143\n",
      "Epoch 7: val_accuracy did not improve from 0.93469\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9630 - loss: 0.1144 - val_accuracy: 0.9184 - val_loss: 0.1958\n",
      "Epoch 7: early stopping\n",
      "Restoring model weights from the end of the best epoch: 2.\n",
      "Combination ('CNN', 'Gabor', 'Contour') -> Test Accuracy: 0.9434\n",
      "Testing combination: ('CNN', 'LBP', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 223ms/step - accuracy: 0.8337 - loss: 0.5406\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93878, saving model to model_combination_CNN_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 260ms/step - accuracy: 0.8345 - loss: 0.5385 - val_accuracy: 0.9388 - val_loss: 0.1769\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9487 - loss: 0.1987\n",
      "Epoch 2: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9489 - loss: 0.1978 - val_accuracy: 0.9320 - val_loss: 0.1803\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9637 - loss: 0.0946\n",
      "Epoch 3: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9637 - loss: 0.0945 - val_accuracy: 0.9347 - val_loss: 0.1733\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9764 - loss: 0.0730\n",
      "Epoch 4: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9764 - loss: 0.0730 - val_accuracy: 0.9224 - val_loss: 0.2590\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9825 - loss: 0.0508\n",
      "Epoch 5: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9825 - loss: 0.0508 - val_accuracy: 0.9116 - val_loss: 0.2812\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9862 - loss: 0.0416\n",
      "Epoch 6: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9862 - loss: 0.0415 - val_accuracy: 0.9252 - val_loss: 0.2441\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('CNN', 'LBP', 'SIFT') -> Test Accuracy: 0.9510\n",
      "Testing combination: ('CNN', 'LBP', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 222ms/step - accuracy: 0.8809 - loss: 0.3562\n",
      "Epoch 1: val_accuracy improved from -inf to 0.92789, saving model to model_combination_CNN_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 251ms/step - accuracy: 0.8815 - loss: 0.3547 - val_accuracy: 0.9279 - val_loss: 0.2151\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9550 - loss: 0.1479\n",
      "Epoch 2: val_accuracy improved from 0.92789 to 0.93197, saving model to model_combination_CNN_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - accuracy: 0.9550 - loss: 0.1479 - val_accuracy: 0.9320 - val_loss: 0.2036\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9556 - loss: 0.1334\n",
      "Epoch 3: val_accuracy improved from 0.93197 to 0.93878, saving model to model_combination_CNN_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - accuracy: 0.9557 - loss: 0.1333 - val_accuracy: 0.9388 - val_loss: 0.1814\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9551 - loss: 0.1291\n",
      "Epoch 4: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9552 - loss: 0.1290 - val_accuracy: 0.9347 - val_loss: 0.1797\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9632 - loss: 0.1070\n",
      "Epoch 5: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9632 - loss: 0.1070 - val_accuracy: 0.9224 - val_loss: 0.1975\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9586 - loss: 0.1323\n",
      "Epoch 6: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9587 - loss: 0.1323 - val_accuracy: 0.9252 - val_loss: 0.1971\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9645 - loss: 0.1077\n",
      "Epoch 7: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9645 - loss: 0.1077 - val_accuracy: 0.9374 - val_loss: 0.1714\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9690 - loss: 0.0981\n",
      "Epoch 8: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9689 - loss: 0.0983 - val_accuracy: 0.9347 - val_loss: 0.1840\n",
      "Epoch 8: early stopping\n",
      "Restoring model weights from the end of the best epoch: 3.\n",
      "Combination ('CNN', 'LBP', 'Contour') -> Test Accuracy: 0.9521\n",
      "Testing combination: ('CNN', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step - accuracy: 0.8313 - loss: 0.5602\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94150, saving model to model_combination_CNN_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 262ms/step - accuracy: 0.8320 - loss: 0.5580 - val_accuracy: 0.9415 - val_loss: 0.1608\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9536 - loss: 0.1329\n",
      "Epoch 2: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9537 - loss: 0.1327 - val_accuracy: 0.9401 - val_loss: 0.1573\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9597 - loss: 0.1025\n",
      "Epoch 3: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9599 - loss: 0.1023 - val_accuracy: 0.9306 - val_loss: 0.2023\n",
      "Epoch 4/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9710 - loss: 0.0700\n",
      "Epoch 4: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9710 - loss: 0.0701 - val_accuracy: 0.9333 - val_loss: 0.1873\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9811 - loss: 0.0627\n",
      "Epoch 5: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9811 - loss: 0.0626 - val_accuracy: 0.9184 - val_loss: 0.2136\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9883 - loss: 0.0344\n",
      "Epoch 6: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9883 - loss: 0.0344 - val_accuracy: 0.9374 - val_loss: 0.2096\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('CNN', 'SIFT', 'Contour') -> Test Accuracy: 0.9510\n",
      "Testing combination: ('HOG', 'Gabor', 'LBP')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.5694 - loss: 1.0206\n",
      "Epoch 1: val_accuracy improved from -inf to 0.65850, saving model to model_combination_HOG_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 33ms/step - accuracy: 0.5698 - loss: 1.0180 - val_accuracy: 0.6585 - val_loss: 0.5869\n",
      "Epoch 2/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6861 - loss: 0.5924\n",
      "Epoch 2: val_accuracy improved from 0.65850 to 0.74422, saving model to model_combination_HOG_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6860 - loss: 0.5924 - val_accuracy: 0.7442 - val_loss: 0.5167\n",
      "Epoch 3/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7280 - loss: 0.5354\n",
      "Epoch 3: val_accuracy did not improve from 0.74422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7286 - loss: 0.5348 - val_accuracy: 0.7265 - val_loss: 0.5158\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7715 - loss: 0.4902\n",
      "Epoch 4: val_accuracy did not improve from 0.74422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7717 - loss: 0.4900 - val_accuracy: 0.7361 - val_loss: 0.4942\n",
      "Epoch 5/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7914 - loss: 0.4426\n",
      "Epoch 5: val_accuracy improved from 0.74422 to 0.77143, saving model to model_combination_HOG_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7919 - loss: 0.4427 - val_accuracy: 0.7714 - val_loss: 0.4565\n",
      "Epoch 6/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8072 - loss: 0.4178\n",
      "Epoch 6: val_accuracy did not improve from 0.77143\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8074 - loss: 0.4177 - val_accuracy: 0.7714 - val_loss: 0.4568\n",
      "Epoch 7/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8206 - loss: 0.4011\n",
      "Epoch 7: val_accuracy improved from 0.77143 to 0.80136, saving model to model_combination_HOG_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8207 - loss: 0.4011 - val_accuracy: 0.8014 - val_loss: 0.4348\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8100 - loss: 0.4094\n",
      "Epoch 8: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8100 - loss: 0.4094 - val_accuracy: 0.7837 - val_loss: 0.4421\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8292 - loss: 0.3811\n",
      "Epoch 9: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8291 - loss: 0.3812 - val_accuracy: 0.7891 - val_loss: 0.4460\n",
      "Epoch 10/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8534 - loss: 0.3559\n",
      "Epoch 10: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8526 - loss: 0.3572 - val_accuracy: 0.7891 - val_loss: 0.4461\n",
      "Epoch 11/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8754 - loss: 0.3167\n",
      "Epoch 11: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8755 - loss: 0.3164 - val_accuracy: 0.7959 - val_loss: 0.4547\n",
      "Epoch 12/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8541 - loss: 0.3407\n",
      "Epoch 12: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8540 - loss: 0.3412 - val_accuracy: 0.7646 - val_loss: 0.4949\n",
      "Epoch 12: early stopping\n",
      "Restoring model weights from the end of the best epoch: 7.\n",
      "Combination ('HOG', 'Gabor', 'LBP') -> Test Accuracy: 0.7878\n",
      "Testing combination: ('HOG', 'Gabor', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.6885 - loss: 1.3175\n",
      "Epoch 1: val_accuracy improved from -inf to 0.84490, saving model to model_combination_HOG_Gabor_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 41ms/step - accuracy: 0.6890 - loss: 1.3127 - val_accuracy: 0.8449 - val_loss: 0.3689\n",
      "Epoch 2/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8318 - loss: 0.3753\n",
      "Epoch 2: val_accuracy improved from 0.84490 to 0.85170, saving model to model_combination_HOG_Gabor_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.8322 - loss: 0.3750 - val_accuracy: 0.8517 - val_loss: 0.3384\n",
      "Epoch 3/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8607 - loss: 0.3072\n",
      "Epoch 3: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8610 - loss: 0.3069 - val_accuracy: 0.8286 - val_loss: 0.3450\n",
      "Epoch 4/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9009 - loss: 0.2518\n",
      "Epoch 4: val_accuracy improved from 0.85170 to 0.87483, saving model to model_combination_HOG_Gabor_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.9007 - loss: 0.2520 - val_accuracy: 0.8748 - val_loss: 0.3163\n",
      "Epoch 5/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9194 - loss: 0.2035\n",
      "Epoch 5: val_accuracy did not improve from 0.87483\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9192 - loss: 0.2041 - val_accuracy: 0.8639 - val_loss: 0.3249\n",
      "Epoch 6/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9106 - loss: 0.2132\n",
      "Epoch 6: val_accuracy did not improve from 0.87483\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9106 - loss: 0.2136 - val_accuracy: 0.8531 - val_loss: 0.3349\n",
      "Epoch 7/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9353 - loss: 0.1747\n",
      "Epoch 7: val_accuracy did not improve from 0.87483\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9345 - loss: 0.1766 - val_accuracy: 0.8558 - val_loss: 0.3353\n",
      "Epoch 8/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9330 - loss: 0.1702\n",
      "Epoch 8: val_accuracy did not improve from 0.87483\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9328 - loss: 0.1706 - val_accuracy: 0.8585 - val_loss: 0.3334\n",
      "Epoch 9/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9180 - loss: 0.1974\n",
      "Epoch 9: val_accuracy did not improve from 0.87483\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9171 - loss: 0.1992 - val_accuracy: 0.8612 - val_loss: 0.3453\n",
      "Epoch 9: early stopping\n",
      "Restoring model weights from the end of the best epoch: 4.\n",
      "Combination ('HOG', 'Gabor', 'SIFT') -> Test Accuracy: 0.8466\n",
      "Testing combination: ('HOG', 'Gabor', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.5256 - loss: 1.2607\n",
      "Epoch 1: val_accuracy improved from -inf to 0.70612, saving model to model_combination_HOG_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 31ms/step - accuracy: 0.5262 - loss: 1.2569 - val_accuracy: 0.7061 - val_loss: 0.5839\n",
      "Epoch 2/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6712 - loss: 0.6112\n",
      "Epoch 2: val_accuracy did not improve from 0.70612\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6713 - loss: 0.6108 - val_accuracy: 0.7048 - val_loss: 0.5540\n",
      "Epoch 3/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7059 - loss: 0.5586\n",
      "Epoch 3: val_accuracy improved from 0.70612 to 0.74286, saving model to model_combination_HOG_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7064 - loss: 0.5583 - val_accuracy: 0.7429 - val_loss: 0.5142\n",
      "Epoch 4/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7400 - loss: 0.5340\n",
      "Epoch 4: val_accuracy did not improve from 0.74286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7403 - loss: 0.5334 - val_accuracy: 0.7306 - val_loss: 0.5087\n",
      "Epoch 5/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7659 - loss: 0.4832\n",
      "Epoch 5: val_accuracy did not improve from 0.74286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7659 - loss: 0.4831 - val_accuracy: 0.7211 - val_loss: 0.5195\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7841 - loss: 0.4739\n",
      "Epoch 6: val_accuracy improved from 0.74286 to 0.74694, saving model to model_combination_HOG_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7844 - loss: 0.4736 - val_accuracy: 0.7469 - val_loss: 0.4868\n",
      "Epoch 7/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8130 - loss: 0.4280\n",
      "Epoch 7: val_accuracy improved from 0.74694 to 0.76735, saving model to model_combination_HOG_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8128 - loss: 0.4283 - val_accuracy: 0.7673 - val_loss: 0.4790\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8197 - loss: 0.4134\n",
      "Epoch 8: val_accuracy did not improve from 0.76735\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8197 - loss: 0.4134 - val_accuracy: 0.7102 - val_loss: 0.5244\n",
      "Epoch 9/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8204 - loss: 0.4072\n",
      "Epoch 9: val_accuracy did not improve from 0.76735\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8204 - loss: 0.4073 - val_accuracy: 0.7415 - val_loss: 0.4950\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8307 - loss: 0.4005\n",
      "Epoch 10: val_accuracy did not improve from 0.76735\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8307 - loss: 0.4005 - val_accuracy: 0.7293 - val_loss: 0.4975\n",
      "Epoch 11/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8149 - loss: 0.4027\n",
      "Epoch 11: val_accuracy did not improve from 0.76735\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8147 - loss: 0.4031 - val_accuracy: 0.7524 - val_loss: 0.4847\n",
      "Epoch 12/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8102 - loss: 0.4179\n",
      "Epoch 12: val_accuracy did not improve from 0.76735\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8104 - loss: 0.4174 - val_accuracy: 0.7633 - val_loss: 0.4804\n",
      "Epoch 12: early stopping\n",
      "Restoring model weights from the end of the best epoch: 7.\n",
      "Combination ('HOG', 'Gabor', 'Contour') -> Test Accuracy: 0.7421\n",
      "Testing combination: ('HOG', 'LBP', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.6910 - loss: 1.4414\n",
      "Epoch 1: val_accuracy improved from -inf to 0.83673, saving model to model_combination_HOG_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 41ms/step - accuracy: 0.6916 - loss: 1.4357 - val_accuracy: 0.8367 - val_loss: 0.3843\n",
      "Epoch 2/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8315 - loss: 0.3617\n",
      "Epoch 2: val_accuracy improved from 0.83673 to 0.86259, saving model to model_combination_HOG_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.8326 - loss: 0.3605 - val_accuracy: 0.8626 - val_loss: 0.3297\n",
      "Epoch 3/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8765 - loss: 0.3037\n",
      "Epoch 3: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8767 - loss: 0.3039 - val_accuracy: 0.8503 - val_loss: 0.3425\n",
      "Epoch 4/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8936 - loss: 0.2541\n",
      "Epoch 4: val_accuracy improved from 0.86259 to 0.86531, saving model to model_combination_HOG_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.8939 - loss: 0.2537 - val_accuracy: 0.8653 - val_loss: 0.3194\n",
      "Epoch 5/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8944 - loss: 0.2530\n",
      "Epoch 5: val_accuracy did not improve from 0.86531\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8945 - loss: 0.2529 - val_accuracy: 0.8599 - val_loss: 0.3253\n",
      "Epoch 6/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9218 - loss: 0.1962\n",
      "Epoch 6: val_accuracy did not improve from 0.86531\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9218 - loss: 0.1963 - val_accuracy: 0.8163 - val_loss: 0.4345\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9322 - loss: 0.1752\n",
      "Epoch 7: val_accuracy did not improve from 0.86531\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9320 - loss: 0.1756 - val_accuracy: 0.8313 - val_loss: 0.3679\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9309 - loss: 0.1722\n",
      "Epoch 8: val_accuracy did not improve from 0.86531\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9308 - loss: 0.1726 - val_accuracy: 0.8000 - val_loss: 0.5125\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9404 - loss: 0.1424\n",
      "Epoch 9: val_accuracy did not improve from 0.86531\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9402 - loss: 0.1429 - val_accuracy: 0.8204 - val_loss: 0.4681\n",
      "Epoch 9: early stopping\n",
      "Restoring model weights from the end of the best epoch: 4.\n",
      "Combination ('HOG', 'LBP', 'SIFT') -> Test Accuracy: 0.8575\n",
      "Testing combination: ('HOG', 'LBP', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.5648 - loss: 1.2387\n",
      "Epoch 1: val_accuracy improved from -inf to 0.72789, saving model to model_combination_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 32ms/step - accuracy: 0.5653 - loss: 1.2348 - val_accuracy: 0.7279 - val_loss: 0.5426\n",
      "Epoch 2/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7164 - loss: 0.5578\n",
      "Epoch 2: val_accuracy improved from 0.72789 to 0.75238, saving model to model_combination_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7168 - loss: 0.5575 - val_accuracy: 0.7524 - val_loss: 0.4979\n",
      "Epoch 3/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7555 - loss: 0.5089\n",
      "Epoch 3: val_accuracy improved from 0.75238 to 0.76463, saving model to model_combination_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7553 - loss: 0.5088 - val_accuracy: 0.7646 - val_loss: 0.4741\n",
      "Epoch 4/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7750 - loss: 0.4679\n",
      "Epoch 4: val_accuracy improved from 0.76463 to 0.79320, saving model to model_combination_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7755 - loss: 0.4674 - val_accuracy: 0.7932 - val_loss: 0.4537\n",
      "Epoch 5/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8189 - loss: 0.4158\n",
      "Epoch 5: val_accuracy did not improve from 0.79320\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8186 - loss: 0.4155 - val_accuracy: 0.7905 - val_loss: 0.4489\n",
      "Epoch 6/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8082 - loss: 0.4115\n",
      "Epoch 6: val_accuracy did not improve from 0.79320\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8086 - loss: 0.4113 - val_accuracy: 0.7918 - val_loss: 0.4474\n",
      "Epoch 7/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8474 - loss: 0.3585\n",
      "Epoch 7: val_accuracy did not improve from 0.79320\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8472 - loss: 0.3589 - val_accuracy: 0.7932 - val_loss: 0.4509\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8402 - loss: 0.3652\n",
      "Epoch 8: val_accuracy improved from 0.79320 to 0.79592, saving model to model_combination_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8402 - loss: 0.3652 - val_accuracy: 0.7959 - val_loss: 0.4457\n",
      "Epoch 9/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8695 - loss: 0.3218\n",
      "Epoch 9: val_accuracy improved from 0.79592 to 0.80272, saving model to model_combination_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8691 - loss: 0.3223 - val_accuracy: 0.8027 - val_loss: 0.4389\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8762 - loss: 0.3133\n",
      "Epoch 10: val_accuracy did not improve from 0.80272\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8761 - loss: 0.3134 - val_accuracy: 0.7986 - val_loss: 0.4543\n",
      "Epoch 11/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8568 - loss: 0.3178\n",
      "Epoch 11: val_accuracy did not improve from 0.80272\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8569 - loss: 0.3185 - val_accuracy: 0.7810 - val_loss: 0.4630\n",
      "Epoch 12/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8610 - loss: 0.3347\n",
      "Epoch 12: val_accuracy did not improve from 0.80272\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8610 - loss: 0.3347 - val_accuracy: 0.7932 - val_loss: 0.4420\n",
      "Epoch 13/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8778 - loss: 0.3030\n",
      "Epoch 13: val_accuracy did not improve from 0.80272\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8778 - loss: 0.3032 - val_accuracy: 0.7905 - val_loss: 0.4541\n",
      "Epoch 14/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8870 - loss: 0.2782\n",
      "Epoch 14: val_accuracy did not improve from 0.80272\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8868 - loss: 0.2785 - val_accuracy: 0.7918 - val_loss: 0.4705\n",
      "Epoch 14: early stopping\n",
      "Restoring model weights from the end of the best epoch: 9.\n",
      "Combination ('HOG', 'LBP', 'Contour') -> Test Accuracy: 0.7878\n",
      "Testing combination: ('HOG', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.6795 - loss: 1.2985\n",
      "Epoch 1: val_accuracy improved from -inf to 0.84762, saving model to model_combination_HOG_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 41ms/step - accuracy: 0.6802 - loss: 1.2938 - val_accuracy: 0.8476 - val_loss: 0.3704\n",
      "Epoch 2/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8379 - loss: 0.3549\n",
      "Epoch 2: val_accuracy improved from 0.84762 to 0.85170, saving model to model_combination_HOG_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.8383 - loss: 0.3548 - val_accuracy: 0.8517 - val_loss: 0.3498\n",
      "Epoch 3/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8433 - loss: 0.3425\n",
      "Epoch 3: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8434 - loss: 0.3423 - val_accuracy: 0.8272 - val_loss: 0.3650\n",
      "Epoch 4/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8942 - loss: 0.2647\n",
      "Epoch 4: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8942 - loss: 0.2646 - val_accuracy: 0.8327 - val_loss: 0.3615\n",
      "Epoch 5/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9323 - loss: 0.1842\n",
      "Epoch 5: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9323 - loss: 0.1843 - val_accuracy: 0.8422 - val_loss: 0.3486\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9440 - loss: 0.1535\n",
      "Epoch 6: val_accuracy did not improve from 0.85170\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9440 - loss: 0.1535 - val_accuracy: 0.8490 - val_loss: 0.3417\n",
      "Epoch 7/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9445 - loss: 0.1474\n",
      "Epoch 7: val_accuracy improved from 0.85170 to 0.85442, saving model to model_combination_HOG_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.9444 - loss: 0.1475 - val_accuracy: 0.8544 - val_loss: 0.3322\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9443 - loss: 0.1494\n",
      "Epoch 8: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9444 - loss: 0.1492 - val_accuracy: 0.8245 - val_loss: 0.4894\n",
      "Epoch 9/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9489 - loss: 0.1284\n",
      "Epoch 9: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9489 - loss: 0.1284 - val_accuracy: 0.8544 - val_loss: 0.3553\n",
      "Epoch 10/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9454 - loss: 0.1267\n",
      "Epoch 10: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9454 - loss: 0.1268 - val_accuracy: 0.8544 - val_loss: 0.3614\n",
      "Epoch 11/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9576 - loss: 0.1119\n",
      "Epoch 11: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9575 - loss: 0.1119 - val_accuracy: 0.8218 - val_loss: 0.4843\n",
      "Epoch 12/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9545 - loss: 0.1101\n",
      "Epoch 12: val_accuracy improved from 0.85442 to 0.85850, saving model to model_combination_HOG_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.9545 - loss: 0.1102 - val_accuracy: 0.8585 - val_loss: 0.3860\n",
      "Epoch 13/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9561 - loss: 0.1085\n",
      "Epoch 13: val_accuracy did not improve from 0.85850\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9561 - loss: 0.1087 - val_accuracy: 0.8476 - val_loss: 0.3797\n",
      "Epoch 14/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9609 - loss: 0.1000\n",
      "Epoch 14: val_accuracy improved from 0.85850 to 0.86259, saving model to model_combination_HOG_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.9608 - loss: 0.1003 - val_accuracy: 0.8626 - val_loss: 0.3349\n",
      "Epoch 15/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9492 - loss: 0.1230\n",
      "Epoch 15: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9487 - loss: 0.1244 - val_accuracy: 0.8367 - val_loss: 0.3863\n",
      "Epoch 16/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9518 - loss: 0.1289\n",
      "Epoch 16: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9515 - loss: 0.1296 - val_accuracy: 0.8204 - val_loss: 0.5030\n",
      "Epoch 17/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9311 - loss: 0.1715\n",
      "Epoch 17: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9312 - loss: 0.1712 - val_accuracy: 0.8531 - val_loss: 0.4482\n",
      "Epoch 18/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9401 - loss: 0.1460\n",
      "Epoch 18: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9402 - loss: 0.1459 - val_accuracy: 0.8531 - val_loss: 0.3853\n",
      "Epoch 19/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9550 - loss: 0.1191\n",
      "Epoch 19: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9548 - loss: 0.1193 - val_accuracy: 0.8544 - val_loss: 0.3514\n",
      "Epoch 19: early stopping\n",
      "Restoring model weights from the end of the best epoch: 14.\n",
      "Combination ('HOG', 'SIFT', 'Contour') -> Test Accuracy: 0.8509\n",
      "Testing combination: ('Gabor', 'LBP', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.7246 - loss: 0.7704\n",
      "Epoch 1: val_accuracy improved from -inf to 0.83401, saving model to model_combination_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 37ms/step - accuracy: 0.7250 - loss: 0.7686 - val_accuracy: 0.8340 - val_loss: 0.3700\n",
      "Epoch 2/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8454 - loss: 0.3466\n",
      "Epoch 2: val_accuracy improved from 0.83401 to 0.85306, saving model to model_combination_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.8454 - loss: 0.3468 - val_accuracy: 0.8531 - val_loss: 0.3550\n",
      "Epoch 3/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8657 - loss: 0.3001\n",
      "Epoch 3: val_accuracy did not improve from 0.85306\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8665 - loss: 0.3005 - val_accuracy: 0.8490 - val_loss: 0.3454\n",
      "Epoch 4/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8776 - loss: 0.2827\n",
      "Epoch 4: val_accuracy did not improve from 0.85306\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8781 - loss: 0.2822 - val_accuracy: 0.8259 - val_loss: 0.3820\n",
      "Epoch 5/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9235 - loss: 0.1956\n",
      "Epoch 5: val_accuracy did not improve from 0.85306\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9232 - loss: 0.1964 - val_accuracy: 0.8367 - val_loss: 0.3683\n",
      "Epoch 6/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9414 - loss: 0.1661\n",
      "Epoch 6: val_accuracy did not improve from 0.85306\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9400 - loss: 0.1671 - val_accuracy: 0.8463 - val_loss: 0.3492\n",
      "Epoch 7/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9395 - loss: 0.1461\n",
      "Epoch 7: val_accuracy did not improve from 0.85306\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9387 - loss: 0.1483 - val_accuracy: 0.8395 - val_loss: 0.4452\n",
      "Epoch 7: early stopping\n",
      "Restoring model weights from the end of the best epoch: 2.\n",
      "Combination ('Gabor', 'LBP', 'SIFT') -> Test Accuracy: 0.8411\n",
      "Testing combination: ('Gabor', 'LBP', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - accuracy: 0.4994 - loss: 1.7818\n",
      "Epoch 1: val_accuracy improved from -inf to 0.69932, saving model to model_combination_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 28ms/step - accuracy: 0.4997 - loss: 1.7773 - val_accuracy: 0.6993 - val_loss: 0.5875\n",
      "Epoch 2/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.5779 - loss: 0.8074\n",
      "Epoch 2: val_accuracy did not improve from 0.69932\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5845 - loss: 0.7936 - val_accuracy: 0.6789 - val_loss: 0.5856\n",
      "Epoch 3/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.6782 - loss: 0.5982\n",
      "Epoch 3: val_accuracy improved from 0.69932 to 0.70884, saving model to model_combination_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6785 - loss: 0.5969 - val_accuracy: 0.7088 - val_loss: 0.5572\n",
      "Epoch 4/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7072 - loss: 0.5537\n",
      "Epoch 4: val_accuracy improved from 0.70884 to 0.71020, saving model to model_combination_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7073 - loss: 0.5548 - val_accuracy: 0.7102 - val_loss: 0.5513\n",
      "Epoch 5/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7298 - loss: 0.5477\n",
      "Epoch 5: val_accuracy did not improve from 0.71020\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7273 - loss: 0.5495 - val_accuracy: 0.6884 - val_loss: 0.5725\n",
      "Epoch 6/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7288 - loss: 0.5368\n",
      "Epoch 6: val_accuracy improved from 0.71020 to 0.71565, saving model to model_combination_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7273 - loss: 0.5383 - val_accuracy: 0.7156 - val_loss: 0.5528\n",
      "Epoch 7/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7158 - loss: 0.5380\n",
      "Epoch 7: val_accuracy did not improve from 0.71565\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7165 - loss: 0.5386 - val_accuracy: 0.7116 - val_loss: 0.5616\n",
      "Epoch 8/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7323 - loss: 0.5245\n",
      "Epoch 8: val_accuracy improved from 0.71565 to 0.71973, saving model to model_combination_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7319 - loss: 0.5257 - val_accuracy: 0.7197 - val_loss: 0.5417\n",
      "Epoch 9/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7320 - loss: 0.5243\n",
      "Epoch 9: val_accuracy did not improve from 0.71973\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7316 - loss: 0.5253 - val_accuracy: 0.7102 - val_loss: 0.5616\n",
      "Epoch 10/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7373 - loss: 0.5178\n",
      "Epoch 10: val_accuracy improved from 0.71973 to 0.72789, saving model to model_combination_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7362 - loss: 0.5197 - val_accuracy: 0.7279 - val_loss: 0.5485\n",
      "Epoch 11/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7407 - loss: 0.5119\n",
      "Epoch 11: val_accuracy did not improve from 0.72789\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7389 - loss: 0.5139 - val_accuracy: 0.7034 - val_loss: 0.5576\n",
      "Epoch 12/20\n",
      "\u001b[1m76/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7386 - loss: 0.5143\n",
      "Epoch 12: val_accuracy improved from 0.72789 to 0.74286, saving model to model_combination_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7382 - loss: 0.5159 - val_accuracy: 0.7429 - val_loss: 0.5341\n",
      "Epoch 13/20\n",
      "\u001b[1m75/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7418 - loss: 0.5069\n",
      "Epoch 13: val_accuracy did not improve from 0.74286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7404 - loss: 0.5090 - val_accuracy: 0.7415 - val_loss: 0.5337\n",
      "Epoch 14/20\n",
      "\u001b[1m77/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7372 - loss: 0.5141\n",
      "Epoch 14: val_accuracy did not improve from 0.74286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7372 - loss: 0.5147 - val_accuracy: 0.7388 - val_loss: 0.5348\n",
      "Epoch 15/20\n",
      "\u001b[1m74/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7537 - loss: 0.5061\n",
      "Epoch 15: val_accuracy did not improve from 0.74286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7517 - loss: 0.5071 - val_accuracy: 0.7361 - val_loss: 0.5357\n",
      "Epoch 16/20\n",
      "\u001b[1m70/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7407 - loss: 0.5109\n",
      "Epoch 16: val_accuracy did not improve from 0.74286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7411 - loss: 0.5127 - val_accuracy: 0.7347 - val_loss: 0.5362\n",
      "Epoch 17/20\n",
      "\u001b[1m76/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.7462 - loss: 0.5024\n",
      "Epoch 17: val_accuracy did not improve from 0.74286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7452 - loss: 0.5044 - val_accuracy: 0.7374 - val_loss: 0.5302\n",
      "Epoch 17: early stopping\n",
      "Restoring model weights from the end of the best epoch: 12.\n",
      "Combination ('Gabor', 'LBP', 'Contour') -> Test Accuracy: 0.7356\n",
      "Testing combination: ('Gabor', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.6979 - loss: 0.9442\n",
      "Epoch 1: val_accuracy improved from -inf to 0.84354, saving model to model_combination_Gabor_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 36ms/step - accuracy: 0.6985 - loss: 0.9410 - val_accuracy: 0.8435 - val_loss: 0.3726\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8403 - loss: 0.3568\n",
      "Epoch 2: val_accuracy did not improve from 0.84354\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8403 - loss: 0.3569 - val_accuracy: 0.8163 - val_loss: 0.3846\n",
      "Epoch 3/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8709 - loss: 0.2906\n",
      "Epoch 3: val_accuracy did not improve from 0.84354\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8711 - loss: 0.2913 - val_accuracy: 0.8286 - val_loss: 0.3680\n",
      "Epoch 4/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9065 - loss: 0.2380\n",
      "Epoch 4: val_accuracy did not improve from 0.84354\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9062 - loss: 0.2386 - val_accuracy: 0.8435 - val_loss: 0.3574\n",
      "Epoch 5/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9208 - loss: 0.1880\n",
      "Epoch 5: val_accuracy did not improve from 0.84354\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9211 - loss: 0.1882 - val_accuracy: 0.8218 - val_loss: 0.4215\n",
      "Epoch 6/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9491 - loss: 0.1337\n",
      "Epoch 6: val_accuracy did not improve from 0.84354\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9489 - loss: 0.1347 - val_accuracy: 0.8327 - val_loss: 0.3857\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('Gabor', 'SIFT', 'Contour') -> Test Accuracy: 0.8335\n",
      "Testing combination: ('LBP', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.7177 - loss: 0.7492\n",
      "Epoch 1: val_accuracy improved from -inf to 0.83946, saving model to model_combination_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 38ms/step - accuracy: 0.7183 - loss: 0.7475 - val_accuracy: 0.8395 - val_loss: 0.3711\n",
      "Epoch 2/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8437 - loss: 0.3557\n",
      "Epoch 2: val_accuracy improved from 0.83946 to 0.85034, saving model to model_combination_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.8440 - loss: 0.3555 - val_accuracy: 0.8503 - val_loss: 0.3458\n",
      "Epoch 3/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8807 - loss: 0.2785\n",
      "Epoch 3: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8807 - loss: 0.2785 - val_accuracy: 0.8122 - val_loss: 0.3960\n",
      "Epoch 4/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9233 - loss: 0.2003\n",
      "Epoch 4: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9237 - loss: 0.2004 - val_accuracy: 0.8095 - val_loss: 0.4159\n",
      "Epoch 5/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9442 - loss: 0.1570\n",
      "Epoch 5: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9439 - loss: 0.1575 - val_accuracy: 0.8490 - val_loss: 0.3702\n",
      "Epoch 6/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9463 - loss: 0.1347\n",
      "Epoch 6: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9456 - loss: 0.1360 - val_accuracy: 0.8395 - val_loss: 0.3884\n",
      "Epoch 7/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9353 - loss: 0.1577\n",
      "Epoch 7: val_accuracy did not improve from 0.85034\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9355 - loss: 0.1577 - val_accuracy: 0.8150 - val_loss: 0.4770\n",
      "Epoch 7: early stopping\n",
      "Restoring model weights from the end of the best epoch: 2.\n",
      "Combination ('LBP', 'SIFT', 'Contour') -> Test Accuracy: 0.8422\n",
      "Testing combination: ('CNN', 'HOG', 'Gabor', 'LBP')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 222ms/step - accuracy: 0.8380 - loss: 0.6271\n",
      "Epoch 1: val_accuracy improved from -inf to 0.95510, saving model to model_combination_CNN_HOG_Gabor_LBP.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 255ms/step - accuracy: 0.8389 - loss: 0.6243 - val_accuracy: 0.9551 - val_loss: 0.1447\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9393 - loss: 0.2082\n",
      "Epoch 2: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9396 - loss: 0.2073 - val_accuracy: 0.9374 - val_loss: 0.1464\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9592 - loss: 0.1245\n",
      "Epoch 3: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9592 - loss: 0.1244 - val_accuracy: 0.9361 - val_loss: 0.1544\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9571 - loss: 0.1225\n",
      "Epoch 4: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9573 - loss: 0.1223 - val_accuracy: 0.9224 - val_loss: 0.1875\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9680 - loss: 0.0957\n",
      "Epoch 5: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9680 - loss: 0.0957 - val_accuracy: 0.9442 - val_loss: 0.1365\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9681 - loss: 0.0897\n",
      "Epoch 6: val_accuracy did not improve from 0.95510\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9682 - loss: 0.0896 - val_accuracy: 0.9333 - val_loss: 0.1421\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('CNN', 'HOG', 'Gabor', 'LBP') -> Test Accuracy: 0.9652\n",
      "Testing combination: ('CNN', 'HOG', 'Gabor', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 226ms/step - accuracy: 0.8400 - loss: 0.9579\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93878, saving model to model_combination_CNN_HOG_Gabor_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 267ms/step - accuracy: 0.8407 - loss: 0.9534 - val_accuracy: 0.9388 - val_loss: 0.1871\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9519 - loss: 0.1578\n",
      "Epoch 2: val_accuracy improved from 0.93878 to 0.94150, saving model to model_combination_CNN_HOG_Gabor_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 43ms/step - accuracy: 0.9521 - loss: 0.1573 - val_accuracy: 0.9415 - val_loss: 0.1457\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9617 - loss: 0.1106\n",
      "Epoch 3: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9618 - loss: 0.1104 - val_accuracy: 0.9374 - val_loss: 0.1508\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9677 - loss: 0.0925\n",
      "Epoch 4: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9678 - loss: 0.0924 - val_accuracy: 0.9401 - val_loss: 0.1550\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9847 - loss: 0.0501\n",
      "Epoch 5: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9847 - loss: 0.0500 - val_accuracy: 0.9415 - val_loss: 0.1500\n",
      "Epoch 6/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9864 - loss: 0.0510\n",
      "Epoch 6: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9864 - loss: 0.0510 - val_accuracy: 0.9415 - val_loss: 0.1543\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9801 - loss: 0.0586\n",
      "Epoch 7: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9801 - loss: 0.0585 - val_accuracy: 0.9333 - val_loss: 0.2232\n",
      "Epoch 7: early stopping\n",
      "Restoring model weights from the end of the best epoch: 2.\n",
      "Combination ('CNN', 'HOG', 'Gabor', 'SIFT') -> Test Accuracy: 0.9619\n",
      "Testing combination: ('CNN', 'HOG', 'Gabor', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 223ms/step - accuracy: 0.8751 - loss: 0.4350\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94150, saving model to model_combination_CNN_HOG_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 259ms/step - accuracy: 0.8756 - loss: 0.4337 - val_accuracy: 0.9415 - val_loss: 0.1348\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9507 - loss: 0.1649\n",
      "Epoch 2: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9508 - loss: 0.1646 - val_accuracy: 0.9320 - val_loss: 0.1526\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9609 - loss: 0.1137\n",
      "Epoch 3: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9610 - loss: 0.1136 - val_accuracy: 0.9306 - val_loss: 0.1685\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9603 - loss: 0.1139\n",
      "Epoch 4: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9603 - loss: 0.1137 - val_accuracy: 0.9401 - val_loss: 0.1365\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9676 - loss: 0.0877\n",
      "Epoch 5: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9676 - loss: 0.0879 - val_accuracy: 0.9361 - val_loss: 0.1427\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9654 - loss: 0.1007\n",
      "Epoch 6: val_accuracy improved from 0.94150 to 0.94422, saving model to model_combination_CNN_HOG_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9655 - loss: 0.1004 - val_accuracy: 0.9442 - val_loss: 0.1348\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9736 - loss: 0.0772\n",
      "Epoch 7: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9736 - loss: 0.0773 - val_accuracy: 0.9279 - val_loss: 0.1767\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9767 - loss: 0.0758\n",
      "Epoch 8: val_accuracy improved from 0.94422 to 0.95102, saving model to model_combination_CNN_HOG_Gabor_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9767 - loss: 0.0757 - val_accuracy: 0.9510 - val_loss: 0.1338\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9689 - loss: 0.0888\n",
      "Epoch 9: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9689 - loss: 0.0887 - val_accuracy: 0.9401 - val_loss: 0.1396\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9717 - loss: 0.0973\n",
      "Epoch 10: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9718 - loss: 0.0970 - val_accuracy: 0.9401 - val_loss: 0.1804\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9825 - loss: 0.0518\n",
      "Epoch 11: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9824 - loss: 0.0519 - val_accuracy: 0.9429 - val_loss: 0.1489\n",
      "Epoch 12/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9812 - loss: 0.0558\n",
      "Epoch 12: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9812 - loss: 0.0556 - val_accuracy: 0.9497 - val_loss: 0.1393\n",
      "Epoch 13/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9840 - loss: 0.0529\n",
      "Epoch 13: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9841 - loss: 0.0528 - val_accuracy: 0.9456 - val_loss: 0.2029\n",
      "Epoch 13: early stopping\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Combination ('CNN', 'HOG', 'Gabor', 'Contour') -> Test Accuracy: 0.9608\n",
      "Testing combination: ('CNN', 'HOG', 'LBP', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step - accuracy: 0.8473 - loss: 0.8616\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93605, saving model to model_combination_CNN_HOG_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 267ms/step - accuracy: 0.8479 - loss: 0.8583 - val_accuracy: 0.9361 - val_loss: 0.1508\n",
      "Epoch 2/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9482 - loss: 0.1573\n",
      "Epoch 2: val_accuracy did not improve from 0.93605\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9483 - loss: 0.1572 - val_accuracy: 0.9320 - val_loss: 0.1672\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9726 - loss: 0.0847\n",
      "Epoch 3: val_accuracy did not improve from 0.93605\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9726 - loss: 0.0847 - val_accuracy: 0.9361 - val_loss: 0.1592\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9750 - loss: 0.0620\n",
      "Epoch 4: val_accuracy improved from 0.93605 to 0.94286, saving model to model_combination_CNN_HOG_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 43ms/step - accuracy: 0.9751 - loss: 0.0620 - val_accuracy: 0.9429 - val_loss: 0.1414\n",
      "Epoch 5/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9779 - loss: 0.0582\n",
      "Epoch 5: val_accuracy improved from 0.94286 to 0.94558, saving model to model_combination_CNN_HOG_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 44ms/step - accuracy: 0.9779 - loss: 0.0581 - val_accuracy: 0.9456 - val_loss: 0.1546\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9849 - loss: 0.0558\n",
      "Epoch 6: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9849 - loss: 0.0556 - val_accuracy: 0.9415 - val_loss: 0.1653\n",
      "Epoch 7/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9885 - loss: 0.0340\n",
      "Epoch 7: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9885 - loss: 0.0339 - val_accuracy: 0.9429 - val_loss: 0.1783\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9806 - loss: 0.0647\n",
      "Epoch 8: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9806 - loss: 0.0647 - val_accuracy: 0.9442 - val_loss: 0.1512\n",
      "Epoch 9/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9770 - loss: 0.0718\n",
      "Epoch 9: val_accuracy improved from 0.94558 to 0.94966, saving model to model_combination_CNN_HOG_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 44ms/step - accuracy: 0.9772 - loss: 0.0710 - val_accuracy: 0.9497 - val_loss: 0.1658\n",
      "Epoch 10/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9774 - loss: 0.0571\n",
      "Epoch 10: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9775 - loss: 0.0569 - val_accuracy: 0.9401 - val_loss: 0.2512\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9882 - loss: 0.0352\n",
      "Epoch 11: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9882 - loss: 0.0352 - val_accuracy: 0.9374 - val_loss: 0.3116\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9926 - loss: 0.0267\n",
      "Epoch 12: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9925 - loss: 0.0268 - val_accuracy: 0.9415 - val_loss: 0.2765\n",
      "Epoch 13/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9897 - loss: 0.0331\n",
      "Epoch 13: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9896 - loss: 0.0331 - val_accuracy: 0.9374 - val_loss: 0.2359\n",
      "Epoch 14/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9926 - loss: 0.0284\n",
      "Epoch 14: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9926 - loss: 0.0283 - val_accuracy: 0.9429 - val_loss: 0.1821\n",
      "Epoch 14: early stopping\n",
      "Restoring model weights from the end of the best epoch: 9.\n",
      "Combination ('CNN', 'HOG', 'LBP', 'SIFT') -> Test Accuracy: 0.9619\n",
      "Testing combination: ('CNN', 'HOG', 'LBP', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 224ms/step - accuracy: 0.8392 - loss: 0.6258\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93741, saving model to model_combination_CNN_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 257ms/step - accuracy: 0.8400 - loss: 0.6230 - val_accuracy: 0.9374 - val_loss: 0.1538\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9504 - loss: 0.1696\n",
      "Epoch 2: val_accuracy did not improve from 0.93741\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9506 - loss: 0.1691 - val_accuracy: 0.9293 - val_loss: 0.1763\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9603 - loss: 0.1235\n",
      "Epoch 3: val_accuracy did not improve from 0.93741\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9604 - loss: 0.1233 - val_accuracy: 0.9361 - val_loss: 0.1503\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9614 - loss: 0.1015\n",
      "Epoch 4: val_accuracy improved from 0.93741 to 0.94558, saving model to model_combination_CNN_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9615 - loss: 0.1014 - val_accuracy: 0.9456 - val_loss: 0.1307\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9706 - loss: 0.0939\n",
      "Epoch 5: val_accuracy improved from 0.94558 to 0.94966, saving model to model_combination_CNN_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9707 - loss: 0.0937 - val_accuracy: 0.9497 - val_loss: 0.1331\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9762 - loss: 0.0840\n",
      "Epoch 6: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9762 - loss: 0.0840 - val_accuracy: 0.9388 - val_loss: 0.1462\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9720 - loss: 0.0738\n",
      "Epoch 7: val_accuracy did not improve from 0.94966\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9721 - loss: 0.0737 - val_accuracy: 0.9401 - val_loss: 0.1574\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9742 - loss: 0.0781\n",
      "Epoch 8: val_accuracy improved from 0.94966 to 0.95102, saving model to model_combination_CNN_HOG_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 36ms/step - accuracy: 0.9742 - loss: 0.0781 - val_accuracy: 0.9510 - val_loss: 0.1416\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9758 - loss: 0.0712\n",
      "Epoch 9: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9759 - loss: 0.0712 - val_accuracy: 0.9456 - val_loss: 0.1524\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9767 - loss: 0.0633\n",
      "Epoch 10: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9768 - loss: 0.0632 - val_accuracy: 0.9456 - val_loss: 0.1690\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9761 - loss: 0.0735\n",
      "Epoch 11: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9760 - loss: 0.0737 - val_accuracy: 0.9143 - val_loss: 0.2684\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9780 - loss: 0.0617\n",
      "Epoch 12: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9780 - loss: 0.0616 - val_accuracy: 0.9347 - val_loss: 0.2105\n",
      "Epoch 13/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9840 - loss: 0.0617\n",
      "Epoch 13: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9840 - loss: 0.0614 - val_accuracy: 0.9497 - val_loss: 0.1580\n",
      "Epoch 13: early stopping\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Combination ('CNN', 'HOG', 'LBP', 'Contour') -> Test Accuracy: 0.9608\n",
      "Testing combination: ('CNN', 'HOG', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step - accuracy: 0.8436 - loss: 0.9708\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93605, saving model to model_combination_CNN_HOG_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 267ms/step - accuracy: 0.8443 - loss: 0.9660 - val_accuracy: 0.9361 - val_loss: 0.1706\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9478 - loss: 0.1579\n",
      "Epoch 2: val_accuracy improved from 0.93605 to 0.94150, saving model to model_combination_CNN_HOG_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 43ms/step - accuracy: 0.9481 - loss: 0.1572 - val_accuracy: 0.9415 - val_loss: 0.1443\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9697 - loss: 0.0940\n",
      "Epoch 3: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9697 - loss: 0.0940 - val_accuracy: 0.9401 - val_loss: 0.1559\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9851 - loss: 0.0538\n",
      "Epoch 4: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9850 - loss: 0.0539 - val_accuracy: 0.9388 - val_loss: 0.1521\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9708 - loss: 0.0838\n",
      "Epoch 5: val_accuracy improved from 0.94150 to 0.94286, saving model to model_combination_CNN_HOG_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 44ms/step - accuracy: 0.9709 - loss: 0.0838 - val_accuracy: 0.9429 - val_loss: 0.1509\n",
      "Epoch 6/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.9827 - loss: 0.0545\n",
      "Epoch 6: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 26ms/step - accuracy: 0.9826 - loss: 0.0546 - val_accuracy: 0.9401 - val_loss: 0.1630\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9779 - loss: 0.0648\n",
      "Epoch 7: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9780 - loss: 0.0647 - val_accuracy: 0.9333 - val_loss: 0.2346\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9816 - loss: 0.0500\n",
      "Epoch 8: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9816 - loss: 0.0500 - val_accuracy: 0.9320 - val_loss: 0.2520\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9764 - loss: 0.0699\n",
      "Epoch 9: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9765 - loss: 0.0697 - val_accuracy: 0.9211 - val_loss: 0.3299\n",
      "Epoch 10/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9884 - loss: 0.0372\n",
      "Epoch 10: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9884 - loss: 0.0372 - val_accuracy: 0.9306 - val_loss: 0.3051\n",
      "Epoch 10: early stopping\n",
      "Restoring model weights from the end of the best epoch: 5.\n",
      "Combination ('CNN', 'HOG', 'SIFT', 'Contour') -> Test Accuracy: 0.9641\n",
      "Testing combination: ('CNN', 'Gabor', 'LBP', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 227ms/step - accuracy: 0.8330 - loss: 0.6118\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93605, saving model to model_combination_CNN_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 267ms/step - accuracy: 0.8337 - loss: 0.6099 - val_accuracy: 0.9361 - val_loss: 0.1743\n",
      "Epoch 2/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9430 - loss: 0.1998\n",
      "Epoch 2: val_accuracy did not improve from 0.93605\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9431 - loss: 0.1994 - val_accuracy: 0.9333 - val_loss: 0.1759\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9662 - loss: 0.0963\n",
      "Epoch 3: val_accuracy improved from 0.93605 to 0.93741, saving model to model_combination_CNN_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 39ms/step - accuracy: 0.9663 - loss: 0.0961 - val_accuracy: 0.9374 - val_loss: 0.1874\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9749 - loss: 0.0672\n",
      "Epoch 4: val_accuracy improved from 0.93741 to 0.93878, saving model to model_combination_CNN_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 38ms/step - accuracy: 0.9750 - loss: 0.0670 - val_accuracy: 0.9388 - val_loss: 0.1767\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9857 - loss: 0.0385\n",
      "Epoch 5: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9857 - loss: 0.0385 - val_accuracy: 0.9347 - val_loss: 0.2629\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9847 - loss: 0.0458\n",
      "Epoch 6: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9847 - loss: 0.0457 - val_accuracy: 0.9320 - val_loss: 0.2297\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9890 - loss: 0.0386\n",
      "Epoch 7: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9889 - loss: 0.0386 - val_accuracy: 0.9388 - val_loss: 0.2244\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9770 - loss: 0.0703\n",
      "Epoch 8: val_accuracy improved from 0.93878 to 0.94150, saving model to model_combination_CNN_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 39ms/step - accuracy: 0.9771 - loss: 0.0700 - val_accuracy: 0.9415 - val_loss: 0.2049\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9866 - loss: 0.0378\n",
      "Epoch 9: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9866 - loss: 0.0378 - val_accuracy: 0.9088 - val_loss: 0.2299\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9872 - loss: 0.0416\n",
      "Epoch 10: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9872 - loss: 0.0415 - val_accuracy: 0.9333 - val_loss: 0.2876\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9942 - loss: 0.0217\n",
      "Epoch 11: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9941 - loss: 0.0218 - val_accuracy: 0.9401 - val_loss: 0.2366\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9903 - loss: 0.0292\n",
      "Epoch 12: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9903 - loss: 0.0290 - val_accuracy: 0.9374 - val_loss: 0.3203\n",
      "Epoch 13/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9918 - loss: 0.0201\n",
      "Epoch 13: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9919 - loss: 0.0199 - val_accuracy: 0.9401 - val_loss: 0.2494\n",
      "Epoch 13: early stopping\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Combination ('CNN', 'Gabor', 'LBP', 'SIFT') -> Test Accuracy: 0.9532\n",
      "Testing combination: ('CNN', 'Gabor', 'LBP', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 220ms/step - accuracy: 0.8984 - loss: 0.3192\n",
      "Epoch 1: val_accuracy improved from -inf to 0.92925, saving model to model_combination_CNN_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 251ms/step - accuracy: 0.8988 - loss: 0.3182 - val_accuracy: 0.9293 - val_loss: 0.1847\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9520 - loss: 0.1503\n",
      "Epoch 2: val_accuracy did not improve from 0.92925\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9521 - loss: 0.1502 - val_accuracy: 0.9279 - val_loss: 0.1942\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9560 - loss: 0.1368\n",
      "Epoch 3: val_accuracy improved from 0.92925 to 0.94286, saving model to model_combination_CNN_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - accuracy: 0.9560 - loss: 0.1367 - val_accuracy: 0.9429 - val_loss: 0.1602\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9578 - loss: 0.1183\n",
      "Epoch 4: val_accuracy improved from 0.94286 to 0.94558, saving model to model_combination_CNN_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 30ms/step - accuracy: 0.9578 - loss: 0.1183 - val_accuracy: 0.9456 - val_loss: 0.1841\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9610 - loss: 0.1244\n",
      "Epoch 5: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9610 - loss: 0.1243 - val_accuracy: 0.9347 - val_loss: 0.1677\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9642 - loss: 0.1183\n",
      "Epoch 6: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9642 - loss: 0.1183 - val_accuracy: 0.8939 - val_loss: 0.2582\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9617 - loss: 0.1175\n",
      "Epoch 7: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9617 - loss: 0.1172 - val_accuracy: 0.9401 - val_loss: 0.1674\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9600 - loss: 0.1129\n",
      "Epoch 8: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9600 - loss: 0.1126 - val_accuracy: 0.9401 - val_loss: 0.1680\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9624 - loss: 0.1101\n",
      "Epoch 9: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9624 - loss: 0.1100 - val_accuracy: 0.9211 - val_loss: 0.2078\n",
      "Epoch 9: early stopping\n",
      "Restoring model weights from the end of the best epoch: 4.\n",
      "Combination ('CNN', 'Gabor', 'LBP', 'Contour') -> Test Accuracy: 0.9608\n",
      "Testing combination: ('CNN', 'Gabor', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 228ms/step - accuracy: 0.8494 - loss: 0.6102\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93605, saving model to model_combination_CNN_Gabor_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 266ms/step - accuracy: 0.8501 - loss: 0.6071 - val_accuracy: 0.9361 - val_loss: 0.1499\n",
      "Epoch 2/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9573 - loss: 0.1272\n",
      "Epoch 2: val_accuracy did not improve from 0.93605\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9575 - loss: 0.1267 - val_accuracy: 0.9265 - val_loss: 0.1924\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9691 - loss: 0.0889\n",
      "Epoch 3: val_accuracy did not improve from 0.93605\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9691 - loss: 0.0889 - val_accuracy: 0.9265 - val_loss: 0.1949\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9776 - loss: 0.0675\n",
      "Epoch 4: val_accuracy did not improve from 0.93605\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9776 - loss: 0.0674 - val_accuracy: 0.9224 - val_loss: 0.2293\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9808 - loss: 0.0564\n",
      "Epoch 5: val_accuracy did not improve from 0.93605\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9808 - loss: 0.0564 - val_accuracy: 0.9306 - val_loss: 0.2328\n",
      "Epoch 6/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9809 - loss: 0.0543\n",
      "Epoch 6: val_accuracy improved from 0.93605 to 0.94422, saving model to model_combination_CNN_Gabor_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 39ms/step - accuracy: 0.9809 - loss: 0.0543 - val_accuracy: 0.9442 - val_loss: 0.1877\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9783 - loss: 0.0758\n",
      "Epoch 7: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9783 - loss: 0.0756 - val_accuracy: 0.9442 - val_loss: 0.1875\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9815 - loss: 0.0507\n",
      "Epoch 8: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9815 - loss: 0.0507 - val_accuracy: 0.9061 - val_loss: 0.2227\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9899 - loss: 0.0345\n",
      "Epoch 9: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9898 - loss: 0.0346 - val_accuracy: 0.9156 - val_loss: 0.2980\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9719 - loss: 0.0731\n",
      "Epoch 10: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9720 - loss: 0.0729 - val_accuracy: 0.8993 - val_loss: 0.4132\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9856 - loss: 0.0463\n",
      "Epoch 11: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9856 - loss: 0.0461 - val_accuracy: 0.9347 - val_loss: 0.2981\n",
      "Epoch 11: early stopping\n",
      "Restoring model weights from the end of the best epoch: 6.\n",
      "Combination ('CNN', 'Gabor', 'SIFT', 'Contour') -> Test Accuracy: 0.9510\n",
      "Testing combination: ('CNN', 'LBP', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 229ms/step - accuracy: 0.8645 - loss: 0.5057\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93741, saving model to model_combination_CNN_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 267ms/step - accuracy: 0.8651 - loss: 0.5038 - val_accuracy: 0.9374 - val_loss: 0.1809\n",
      "Epoch 2/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9575 - loss: 0.1495\n",
      "Epoch 2: val_accuracy did not improve from 0.93741\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9575 - loss: 0.1493 - val_accuracy: 0.9347 - val_loss: 0.2006\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9718 - loss: 0.0767\n",
      "Epoch 3: val_accuracy did not improve from 0.93741\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9719 - loss: 0.0767 - val_accuracy: 0.9061 - val_loss: 0.2980\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9784 - loss: 0.0659\n",
      "Epoch 4: val_accuracy did not improve from 0.93741\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9784 - loss: 0.0658 - val_accuracy: 0.9252 - val_loss: 0.2385\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9872 - loss: 0.0417\n",
      "Epoch 5: val_accuracy did not improve from 0.93741\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9872 - loss: 0.0418 - val_accuracy: 0.9252 - val_loss: 0.2697\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9851 - loss: 0.0437\n",
      "Epoch 6: val_accuracy improved from 0.93741 to 0.94150, saving model to model_combination_CNN_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 39ms/step - accuracy: 0.9852 - loss: 0.0437 - val_accuracy: 0.9415 - val_loss: 0.1900\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9784 - loss: 0.0584\n",
      "Epoch 7: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9785 - loss: 0.0582 - val_accuracy: 0.9374 - val_loss: 0.1998\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9835 - loss: 0.0396\n",
      "Epoch 8: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9836 - loss: 0.0395 - val_accuracy: 0.9265 - val_loss: 0.2954\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9873 - loss: 0.0284\n",
      "Epoch 9: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9873 - loss: 0.0283 - val_accuracy: 0.9361 - val_loss: 0.2942\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9910 - loss: 0.0386\n",
      "Epoch 10: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9910 - loss: 0.0388 - val_accuracy: 0.9238 - val_loss: 0.3956\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9812 - loss: 0.0525\n",
      "Epoch 11: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9813 - loss: 0.0524 - val_accuracy: 0.9184 - val_loss: 0.2531\n",
      "Epoch 11: early stopping\n",
      "Restoring model weights from the end of the best epoch: 6.\n",
      "Combination ('CNN', 'LBP', 'SIFT', 'Contour') -> Test Accuracy: 0.9543\n",
      "Testing combination: ('HOG', 'Gabor', 'LBP', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.6767 - loss: 1.2886\n",
      "Epoch 1: val_accuracy improved from -inf to 0.85442, saving model to model_combination_HOG_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 42ms/step - accuracy: 0.6775 - loss: 1.2838 - val_accuracy: 0.8544 - val_loss: 0.3648\n",
      "Epoch 2/20\n",
      "\u001b[1m81/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8264 - loss: 0.3716\n",
      "Epoch 2: val_accuracy improved from 0.85442 to 0.86122, saving model to model_combination_HOG_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.8276 - loss: 0.3711 - val_accuracy: 0.8612 - val_loss: 0.3432\n",
      "Epoch 3/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8677 - loss: 0.3200\n",
      "Epoch 3: val_accuracy did not improve from 0.86122\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8680 - loss: 0.3195 - val_accuracy: 0.8585 - val_loss: 0.3308\n",
      "Epoch 4/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8799 - loss: 0.2768\n",
      "Epoch 4: val_accuracy did not improve from 0.86122\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8800 - loss: 0.2766 - val_accuracy: 0.8571 - val_loss: 0.3277\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8889 - loss: 0.2623\n",
      "Epoch 5: val_accuracy improved from 0.86122 to 0.86395, saving model to model_combination_HOG_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.8892 - loss: 0.2620 - val_accuracy: 0.8639 - val_loss: 0.3188\n",
      "Epoch 6/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9133 - loss: 0.2154\n",
      "Epoch 6: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9131 - loss: 0.2158 - val_accuracy: 0.8544 - val_loss: 0.3222\n",
      "Epoch 7/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9026 - loss: 0.2161\n",
      "Epoch 7: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9027 - loss: 0.2163 - val_accuracy: 0.8639 - val_loss: 0.3265\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9090 - loss: 0.2101\n",
      "Epoch 8: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9089 - loss: 0.2102 - val_accuracy: 0.8517 - val_loss: 0.3575\n",
      "Epoch 9/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9279 - loss: 0.1784\n",
      "Epoch 9: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9280 - loss: 0.1783 - val_accuracy: 0.8367 - val_loss: 0.3857\n",
      "Epoch 10/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9514 - loss: 0.1207\n",
      "Epoch 10: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9512 - loss: 0.1214 - val_accuracy: 0.8476 - val_loss: 0.3723\n",
      "Epoch 10: early stopping\n",
      "Restoring model weights from the end of the best epoch: 5.\n",
      "Combination ('HOG', 'Gabor', 'LBP', 'SIFT') -> Test Accuracy: 0.8596\n",
      "Testing combination: ('HOG', 'Gabor', 'LBP', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - accuracy: 0.5344 - loss: 1.7212\n",
      "Epoch 1: val_accuracy improved from -inf to 0.70612, saving model to model_combination_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 32ms/step - accuracy: 0.5349 - loss: 1.7143 - val_accuracy: 0.7061 - val_loss: 0.5681\n",
      "Epoch 2/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6758 - loss: 0.5906\n",
      "Epoch 2: val_accuracy improved from 0.70612 to 0.75102, saving model to model_combination_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6772 - loss: 0.5896 - val_accuracy: 0.7510 - val_loss: 0.5122\n",
      "Epoch 3/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7295 - loss: 0.5366\n",
      "Epoch 3: val_accuracy improved from 0.75102 to 0.76190, saving model to model_combination_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7305 - loss: 0.5356 - val_accuracy: 0.7619 - val_loss: 0.4906\n",
      "Epoch 4/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7767 - loss: 0.4821\n",
      "Epoch 4: val_accuracy improved from 0.76190 to 0.77551, saving model to model_combination_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7770 - loss: 0.4820 - val_accuracy: 0.7755 - val_loss: 0.4673\n",
      "Epoch 5/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7915 - loss: 0.4496\n",
      "Epoch 5: val_accuracy improved from 0.77551 to 0.78367, saving model to model_combination_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7916 - loss: 0.4497 - val_accuracy: 0.7837 - val_loss: 0.4526\n",
      "Epoch 6/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8236 - loss: 0.4190\n",
      "Epoch 6: val_accuracy improved from 0.78367 to 0.78639, saving model to model_combination_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8227 - loss: 0.4192 - val_accuracy: 0.7864 - val_loss: 0.4531\n",
      "Epoch 7/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8167 - loss: 0.4147\n",
      "Epoch 7: val_accuracy did not improve from 0.78639\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8164 - loss: 0.4150 - val_accuracy: 0.7850 - val_loss: 0.4488\n",
      "Epoch 8/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8159 - loss: 0.4034\n",
      "Epoch 8: val_accuracy did not improve from 0.78639\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8169 - loss: 0.4024 - val_accuracy: 0.7537 - val_loss: 0.4791\n",
      "Epoch 9/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8411 - loss: 0.3672\n",
      "Epoch 9: val_accuracy improved from 0.78639 to 0.80136, saving model to model_combination_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8413 - loss: 0.3670 - val_accuracy: 0.8014 - val_loss: 0.4368\n",
      "Epoch 10/20\n",
      "\u001b[1m76/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8563 - loss: 0.3559\n",
      "Epoch 10: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8554 - loss: 0.3560 - val_accuracy: 0.7714 - val_loss: 0.4604\n",
      "Epoch 11/20\n",
      "\u001b[1m75/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8581 - loss: 0.3366\n",
      "Epoch 11: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8586 - loss: 0.3361 - val_accuracy: 0.7755 - val_loss: 0.4653\n",
      "Epoch 12/20\n",
      "\u001b[1m83/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8790 - loss: 0.3057\n",
      "Epoch 12: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8774 - loss: 0.3079 - val_accuracy: 0.7932 - val_loss: 0.4416\n",
      "Epoch 13/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8739 - loss: 0.3186\n",
      "Epoch 13: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8736 - loss: 0.3195 - val_accuracy: 0.7687 - val_loss: 0.4740\n",
      "Epoch 14/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8706 - loss: 0.3197\n",
      "Epoch 14: val_accuracy did not improve from 0.80136\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.8703 - loss: 0.3199 - val_accuracy: 0.7946 - val_loss: 0.4603\n",
      "Epoch 14: early stopping\n",
      "Restoring model weights from the end of the best epoch: 9.\n",
      "Combination ('HOG', 'Gabor', 'LBP', 'Contour') -> Test Accuracy: 0.7856\n",
      "Testing combination: ('HOG', 'Gabor', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.6877 - loss: 1.3754\n",
      "Epoch 1: val_accuracy improved from -inf to 0.84762, saving model to model_combination_HOG_Gabor_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 41ms/step - accuracy: 0.6883 - loss: 1.3698 - val_accuracy: 0.8476 - val_loss: 0.3791\n",
      "Epoch 2/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8240 - loss: 0.3867\n",
      "Epoch 2: val_accuracy improved from 0.84762 to 0.85850, saving model to model_combination_HOG_Gabor_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.8254 - loss: 0.3851 - val_accuracy: 0.8585 - val_loss: 0.3339\n",
      "Epoch 3/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8677 - loss: 0.2957\n",
      "Epoch 3: val_accuracy improved from 0.85850 to 0.86259, saving model to model_combination_HOG_Gabor_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.8682 - loss: 0.2956 - val_accuracy: 0.8626 - val_loss: 0.3266\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8847 - loss: 0.2635\n",
      "Epoch 4: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8849 - loss: 0.2634 - val_accuracy: 0.8544 - val_loss: 0.3209\n",
      "Epoch 5/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9118 - loss: 0.2158\n",
      "Epoch 5: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9120 - loss: 0.2159 - val_accuracy: 0.8490 - val_loss: 0.3363\n",
      "Epoch 6/20\n",
      "\u001b[1m89/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9360 - loss: 0.1745\n",
      "Epoch 6: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9360 - loss: 0.1747 - val_accuracy: 0.8585 - val_loss: 0.3309\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9433 - loss: 0.1527\n",
      "Epoch 7: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9433 - loss: 0.1529 - val_accuracy: 0.8558 - val_loss: 0.3365\n",
      "Epoch 8/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9546 - loss: 0.1436\n",
      "Epoch 8: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9539 - loss: 0.1445 - val_accuracy: 0.8503 - val_loss: 0.3538\n",
      "Epoch 8: early stopping\n",
      "Restoring model weights from the end of the best epoch: 3.\n",
      "Combination ('HOG', 'Gabor', 'SIFT', 'Contour') -> Test Accuracy: 0.8509\n",
      "Testing combination: ('HOG', 'LBP', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.6772 - loss: 1.7023\n",
      "Epoch 1: val_accuracy improved from -inf to 0.84354, saving model to model_combination_HOG_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 42ms/step - accuracy: 0.6778 - loss: 1.6968 - val_accuracy: 0.8435 - val_loss: 0.3565\n",
      "Epoch 2/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8635 - loss: 0.3317\n",
      "Epoch 2: val_accuracy improved from 0.84354 to 0.85442, saving model to model_combination_HOG_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.8628 - loss: 0.3331 - val_accuracy: 0.8544 - val_loss: 0.3373\n",
      "Epoch 3/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8668 - loss: 0.3068\n",
      "Epoch 3: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8661 - loss: 0.3084 - val_accuracy: 0.8544 - val_loss: 0.3239\n",
      "Epoch 4/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8774 - loss: 0.2926\n",
      "Epoch 4: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8774 - loss: 0.2924 - val_accuracy: 0.8381 - val_loss: 0.3414\n",
      "Epoch 5/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9005 - loss: 0.2328\n",
      "Epoch 5: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9008 - loss: 0.2329 - val_accuracy: 0.8476 - val_loss: 0.3486\n",
      "Epoch 6/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9408 - loss: 0.1634\n",
      "Epoch 6: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9407 - loss: 0.1637 - val_accuracy: 0.8503 - val_loss: 0.3441\n",
      "Epoch 7/20\n",
      "\u001b[1m86/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9519 - loss: 0.1263\n",
      "Epoch 7: val_accuracy did not improve from 0.85442\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9518 - loss: 0.1264 - val_accuracy: 0.8544 - val_loss: 0.3663\n",
      "Epoch 7: early stopping\n",
      "Restoring model weights from the end of the best epoch: 2.\n",
      "Combination ('HOG', 'LBP', 'SIFT', 'Contour') -> Test Accuracy: 0.8422\n",
      "Testing combination: ('Gabor', 'LBP', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.7396 - loss: 0.7892\n",
      "Epoch 1: val_accuracy improved from -inf to 0.83129, saving model to model_combination_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 36ms/step - accuracy: 0.7400 - loss: 0.7872 - val_accuracy: 0.8313 - val_loss: 0.3902\n",
      "Epoch 2/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8476 - loss: 0.3502\n",
      "Epoch 2: val_accuracy improved from 0.83129 to 0.84082, saving model to model_combination_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.8472 - loss: 0.3509 - val_accuracy: 0.8408 - val_loss: 0.3628\n",
      "Epoch 3/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8760 - loss: 0.2926\n",
      "Epoch 3: val_accuracy did not improve from 0.84082\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8760 - loss: 0.2928 - val_accuracy: 0.8177 - val_loss: 0.3678\n",
      "Epoch 4/20\n",
      "\u001b[1m88/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9072 - loss: 0.2336\n",
      "Epoch 4: val_accuracy improved from 0.84082 to 0.84490, saving model to model_combination_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.9072 - loss: 0.2337 - val_accuracy: 0.8449 - val_loss: 0.3500\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9222 - loss: 0.2005\n",
      "Epoch 5: val_accuracy did not improve from 0.84490\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9223 - loss: 0.2005 - val_accuracy: 0.8354 - val_loss: 0.3910\n",
      "Epoch 6/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9468 - loss: 0.1520\n",
      "Epoch 6: val_accuracy improved from 0.84490 to 0.84898, saving model to model_combination_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.9467 - loss: 0.1520 - val_accuracy: 0.8490 - val_loss: 0.3702\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9495 - loss: 0.1310\n",
      "Epoch 7: val_accuracy did not improve from 0.84898\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9495 - loss: 0.1311 - val_accuracy: 0.8395 - val_loss: 0.3940\n",
      "Epoch 8/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9627 - loss: 0.1067\n",
      "Epoch 8: val_accuracy did not improve from 0.84898\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9626 - loss: 0.1071 - val_accuracy: 0.8381 - val_loss: 0.4192\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9610 - loss: 0.1095\n",
      "Epoch 9: val_accuracy did not improve from 0.84898\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9608 - loss: 0.1098 - val_accuracy: 0.8490 - val_loss: 0.4410\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9513 - loss: 0.1168\n",
      "Epoch 10: val_accuracy did not improve from 0.84898\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9509 - loss: 0.1176 - val_accuracy: 0.8327 - val_loss: 0.5348\n",
      "Epoch 11/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9410 - loss: 0.1431\n",
      "Epoch 11: val_accuracy improved from 0.84898 to 0.86259, saving model to model_combination_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.9411 - loss: 0.1430 - val_accuracy: 0.8626 - val_loss: 0.4047\n",
      "Epoch 12/20\n",
      "\u001b[1m78/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9553 - loss: 0.1187\n",
      "Epoch 12: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9558 - loss: 0.1164 - val_accuracy: 0.8463 - val_loss: 0.4612\n",
      "Epoch 13/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9607 - loss: 0.1020\n",
      "Epoch 13: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9608 - loss: 0.1017 - val_accuracy: 0.8463 - val_loss: 0.5173\n",
      "Epoch 14/20\n",
      "\u001b[1m80/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9575 - loss: 0.1080\n",
      "Epoch 14: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9585 - loss: 0.1062 - val_accuracy: 0.8490 - val_loss: 0.4946\n",
      "Epoch 15/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9727 - loss: 0.0872\n",
      "Epoch 15: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9721 - loss: 0.0870 - val_accuracy: 0.8463 - val_loss: 0.4496\n",
      "Epoch 16/20\n",
      "\u001b[1m79/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9839 - loss: 0.0600\n",
      "Epoch 16: val_accuracy did not improve from 0.86259\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9837 - loss: 0.0600 - val_accuracy: 0.8381 - val_loss: 0.5416\n",
      "Epoch 16: early stopping\n",
      "Restoring model weights from the end of the best epoch: 11.\n",
      "Combination ('Gabor', 'LBP', 'SIFT', 'Contour') -> Test Accuracy: 0.8324\n",
      "Testing combination: ('CNN', 'HOG', 'Gabor', 'LBP', 'SIFT')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step - accuracy: 0.8519 - loss: 0.8790\n",
      "Epoch 1: val_accuracy improved from -inf to 0.89524, saving model to model_combination_CNN_HOG_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 266ms/step - accuracy: 0.8526 - loss: 0.8751 - val_accuracy: 0.8952 - val_loss: 0.3413\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9493 - loss: 0.1637\n",
      "Epoch 2: val_accuracy improved from 0.89524 to 0.93061, saving model to model_combination_CNN_HOG_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 42ms/step - accuracy: 0.9493 - loss: 0.1632 - val_accuracy: 0.9306 - val_loss: 0.1771\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9643 - loss: 0.1093\n",
      "Epoch 3: val_accuracy improved from 0.93061 to 0.94014, saving model to model_combination_CNN_HOG_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 42ms/step - accuracy: 0.9644 - loss: 0.1089 - val_accuracy: 0.9401 - val_loss: 0.1559\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9716 - loss: 0.0796\n",
      "Epoch 4: val_accuracy improved from 0.94014 to 0.94694, saving model to model_combination_CNN_HOG_Gabor_LBP_SIFT.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 43ms/step - accuracy: 0.9717 - loss: 0.0794 - val_accuracy: 0.9469 - val_loss: 0.1406\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9805 - loss: 0.0626\n",
      "Epoch 5: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9805 - loss: 0.0626 - val_accuracy: 0.9415 - val_loss: 0.1533\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9851 - loss: 0.0461\n",
      "Epoch 6: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9851 - loss: 0.0460 - val_accuracy: 0.9429 - val_loss: 0.1503\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9900 - loss: 0.0433\n",
      "Epoch 7: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9899 - loss: 0.0433 - val_accuracy: 0.9388 - val_loss: 0.1875\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9830 - loss: 0.0480\n",
      "Epoch 8: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9831 - loss: 0.0478 - val_accuracy: 0.9347 - val_loss: 0.1689\n",
      "Epoch 9/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9832 - loss: 0.0461\n",
      "Epoch 9: val_accuracy did not improve from 0.94694\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9833 - loss: 0.0461 - val_accuracy: 0.9333 - val_loss: 0.2239\n",
      "Epoch 9: early stopping\n",
      "Restoring model weights from the end of the best epoch: 4.\n",
      "Combination ('CNN', 'HOG', 'Gabor', 'LBP', 'SIFT') -> Test Accuracy: 0.9630\n",
      "Testing combination: ('CNN', 'HOG', 'Gabor', 'LBP', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 223ms/step - accuracy: 0.8534 - loss: 0.6447\n",
      "Epoch 1: val_accuracy improved from -inf to 0.93878, saving model to model_combination_CNN_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 257ms/step - accuracy: 0.8541 - loss: 0.6418 - val_accuracy: 0.9388 - val_loss: 0.1546\n",
      "Epoch 2/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9583 - loss: 0.1601\n",
      "Epoch 2: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9583 - loss: 0.1598 - val_accuracy: 0.9252 - val_loss: 0.1775\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9580 - loss: 0.1285\n",
      "Epoch 3: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9581 - loss: 0.1281 - val_accuracy: 0.9306 - val_loss: 0.1592\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9665 - loss: 0.1022\n",
      "Epoch 4: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9666 - loss: 0.1020 - val_accuracy: 0.9306 - val_loss: 0.1601\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9634 - loss: 0.1028\n",
      "Epoch 5: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9635 - loss: 0.1026 - val_accuracy: 0.9279 - val_loss: 0.1509\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9732 - loss: 0.0757\n",
      "Epoch 6: val_accuracy improved from 0.93878 to 0.94286, saving model to model_combination_CNN_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 31ms/step - accuracy: 0.9732 - loss: 0.0756 - val_accuracy: 0.9429 - val_loss: 0.1422\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9748 - loss: 0.0726\n",
      "Epoch 7: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9748 - loss: 0.0727 - val_accuracy: 0.9429 - val_loss: 0.1464\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9744 - loss: 0.0721\n",
      "Epoch 8: val_accuracy did not improve from 0.94286\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9744 - loss: 0.0722 - val_accuracy: 0.9320 - val_loss: 0.1616\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9677 - loss: 0.0877\n",
      "Epoch 9: val_accuracy improved from 0.94286 to 0.95238, saving model to model_combination_CNN_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9679 - loss: 0.0874 - val_accuracy: 0.9524 - val_loss: 0.1570\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9775 - loss: 0.0673\n",
      "Epoch 10: val_accuracy improved from 0.95238 to 0.95374, saving model to model_combination_CNN_HOG_Gabor_LBP_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 34ms/step - accuracy: 0.9775 - loss: 0.0673 - val_accuracy: 0.9537 - val_loss: 0.1441\n",
      "Epoch 11/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9750 - loss: 0.0877\n",
      "Epoch 11: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9749 - loss: 0.0883 - val_accuracy: 0.9415 - val_loss: 0.1762\n",
      "Epoch 12/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9712 - loss: 0.0861\n",
      "Epoch 12: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9713 - loss: 0.0858 - val_accuracy: 0.9388 - val_loss: 0.1757\n",
      "Epoch 13/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9847 - loss: 0.0460\n",
      "Epoch 13: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9847 - loss: 0.0460 - val_accuracy: 0.9333 - val_loss: 0.1947\n",
      "Epoch 14/20\n",
      "\u001b[1m90/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9821 - loss: 0.0447\n",
      "Epoch 14: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9822 - loss: 0.0445 - val_accuracy: 0.9456 - val_loss: 0.1799\n",
      "Epoch 15/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - accuracy: 0.9865 - loss: 0.0411\n",
      "Epoch 15: val_accuracy did not improve from 0.95374\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.9865 - loss: 0.0410 - val_accuracy: 0.9469 - val_loss: 0.1770\n",
      "Epoch 15: early stopping\n",
      "Restoring model weights from the end of the best epoch: 10.\n",
      "Combination ('CNN', 'HOG', 'Gabor', 'LBP', 'Contour') -> Test Accuracy: 0.9608\n",
      "Testing combination: ('CNN', 'HOG', 'Gabor', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 228ms/step - accuracy: 0.8333 - loss: 1.0943\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94422, saving model to model_combination_CNN_HOG_Gabor_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m31s\u001b[0m 269ms/step - accuracy: 0.8341 - loss: 1.0893 - val_accuracy: 0.9442 - val_loss: 0.1469\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9469 - loss: 0.2002\n",
      "Epoch 2: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9472 - loss: 0.1991 - val_accuracy: 0.9415 - val_loss: 0.1365\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9687 - loss: 0.0945\n",
      "Epoch 3: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9687 - loss: 0.0944 - val_accuracy: 0.9306 - val_loss: 0.1805\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9767 - loss: 0.0679\n",
      "Epoch 4: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9768 - loss: 0.0678 - val_accuracy: 0.9361 - val_loss: 0.1717\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9779 - loss: 0.0629\n",
      "Epoch 5: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9780 - loss: 0.0629 - val_accuracy: 0.9252 - val_loss: 0.2283\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9803 - loss: 0.0554\n",
      "Epoch 6: val_accuracy did not improve from 0.94422\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9804 - loss: 0.0553 - val_accuracy: 0.9429 - val_loss: 0.1713\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('CNN', 'HOG', 'Gabor', 'SIFT', 'Contour') -> Test Accuracy: 0.9597\n",
      "Testing combination: ('CNN', 'HOG', 'LBP', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 226ms/step - accuracy: 0.8491 - loss: 0.9058\n",
      "Epoch 1: val_accuracy improved from -inf to 0.95102, saving model to model_combination_CNN_HOG_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 268ms/step - accuracy: 0.8498 - loss: 0.9022 - val_accuracy: 0.9510 - val_loss: 0.1547\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9534 - loss: 0.1647\n",
      "Epoch 2: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9535 - loss: 0.1642 - val_accuracy: 0.9415 - val_loss: 0.1472\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9672 - loss: 0.0922\n",
      "Epoch 3: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9673 - loss: 0.0920 - val_accuracy: 0.9265 - val_loss: 0.2148\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9765 - loss: 0.0591\n",
      "Epoch 4: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9765 - loss: 0.0592 - val_accuracy: 0.9306 - val_loss: 0.2291\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9815 - loss: 0.0581\n",
      "Epoch 5: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9814 - loss: 0.0582 - val_accuracy: 0.9361 - val_loss: 0.1621\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9889 - loss: 0.0418\n",
      "Epoch 6: val_accuracy did not improve from 0.95102\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9889 - loss: 0.0417 - val_accuracy: 0.9333 - val_loss: 0.2610\n",
      "Epoch 6: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Combination ('CNN', 'HOG', 'LBP', 'SIFT', 'Contour') -> Test Accuracy: 0.9608\n",
      "Testing combination: ('CNN', 'Gabor', 'LBP', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step - accuracy: 0.8425 - loss: 0.8203\n",
      "Epoch 1: val_accuracy improved from -inf to 0.91701, saving model to model_combination_CNN_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 264ms/step - accuracy: 0.8433 - loss: 0.8160 - val_accuracy: 0.9170 - val_loss: 0.2094\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9560 - loss: 0.1157\n",
      "Epoch 2: val_accuracy improved from 0.91701 to 0.93469, saving model to model_combination_CNN_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 38ms/step - accuracy: 0.9561 - loss: 0.1157 - val_accuracy: 0.9347 - val_loss: 0.1811\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9717 - loss: 0.0865\n",
      "Epoch 3: val_accuracy improved from 0.93469 to 0.93878, saving model to model_combination_CNN_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 38ms/step - accuracy: 0.9718 - loss: 0.0864 - val_accuracy: 0.9388 - val_loss: 0.1656\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9800 - loss: 0.0639\n",
      "Epoch 4: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9800 - loss: 0.0637 - val_accuracy: 0.9388 - val_loss: 0.1768\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9872 - loss: 0.0371\n",
      "Epoch 5: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9872 - loss: 0.0372 - val_accuracy: 0.9374 - val_loss: 0.2069\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9881 - loss: 0.0467\n",
      "Epoch 6: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9881 - loss: 0.0466 - val_accuracy: 0.9388 - val_loss: 0.2090\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9833 - loss: 0.0663\n",
      "Epoch 7: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9833 - loss: 0.0662 - val_accuracy: 0.9361 - val_loss: 0.2124\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9844 - loss: 0.0408\n",
      "Epoch 8: val_accuracy did not improve from 0.93878\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 23ms/step - accuracy: 0.9844 - loss: 0.0408 - val_accuracy: 0.9388 - val_loss: 0.2091\n",
      "Epoch 8: early stopping\n",
      "Restoring model weights from the end of the best epoch: 3.\n",
      "Combination ('CNN', 'Gabor', 'LBP', 'SIFT', 'Contour') -> Test Accuracy: 0.9543\n",
      "Testing combination: ('HOG', 'Gabor', 'LBP', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 0.6919 - loss: 1.0871\n",
      "Epoch 1: val_accuracy improved from -inf to 0.84762, saving model to model_combination_HOG_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 42ms/step - accuracy: 0.6925 - loss: 1.0833 - val_accuracy: 0.8476 - val_loss: 0.3634\n",
      "Epoch 2/20\n",
      "\u001b[1m83/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8398 - loss: 0.3607\n",
      "Epoch 2: val_accuracy improved from 0.84762 to 0.85306, saving model to model_combination_HOG_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.8401 - loss: 0.3621 - val_accuracy: 0.8531 - val_loss: 0.3419\n",
      "Epoch 3/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8567 - loss: 0.3307\n",
      "Epoch 3: val_accuracy improved from 0.85306 to 0.86395, saving model to model_combination_HOG_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - accuracy: 0.8572 - loss: 0.3298 - val_accuracy: 0.8639 - val_loss: 0.3264\n",
      "Epoch 4/20\n",
      "\u001b[1m87/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8876 - loss: 0.2679\n",
      "Epoch 4: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8878 - loss: 0.2680 - val_accuracy: 0.8299 - val_loss: 0.3389\n",
      "Epoch 5/20\n",
      "\u001b[1m82/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9080 - loss: 0.2289\n",
      "Epoch 5: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9079 - loss: 0.2294 - val_accuracy: 0.8599 - val_loss: 0.3304\n",
      "Epoch 6/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9181 - loss: 0.2037\n",
      "Epoch 6: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9181 - loss: 0.2047 - val_accuracy: 0.8639 - val_loss: 0.3194\n",
      "Epoch 7/20\n",
      "\u001b[1m84/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9312 - loss: 0.1855\n",
      "Epoch 7: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9303 - loss: 0.1866 - val_accuracy: 0.8639 - val_loss: 0.3259\n",
      "Epoch 8/20\n",
      "\u001b[1m85/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━━\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9095 - loss: 0.2070\n",
      "Epoch 8: val_accuracy did not improve from 0.86395\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9098 - loss: 0.2078 - val_accuracy: 0.8517 - val_loss: 0.3550\n",
      "Epoch 8: early stopping\n",
      "Restoring model weights from the end of the best epoch: 3.\n",
      "Combination ('HOG', 'Gabor', 'LBP', 'SIFT', 'Contour') -> Test Accuracy: 0.8607\n",
      "Testing combination: ('CNN', 'HOG', 'Gabor', 'LBP', 'SIFT', 'Contour')\n",
      "Epoch 1/20\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 228ms/step - accuracy: 0.8573 - loss: 1.0230\n",
      "Epoch 1: val_accuracy improved from -inf to 0.94150, saving model to model_combination_CNN_HOG_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 274ms/step - accuracy: 0.8579 - loss: 1.0183 - val_accuracy: 0.9415 - val_loss: 0.1509\n",
      "Epoch 2/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9462 - loss: 0.1779\n",
      "Epoch 2: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9465 - loss: 0.1771 - val_accuracy: 0.9374 - val_loss: 0.1637\n",
      "Epoch 3/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9645 - loss: 0.0998\n",
      "Epoch 3: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 24ms/step - accuracy: 0.9646 - loss: 0.0997 - val_accuracy: 0.9374 - val_loss: 0.1559\n",
      "Epoch 4/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9748 - loss: 0.0786\n",
      "Epoch 4: val_accuracy did not improve from 0.94150\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9749 - loss: 0.0784 - val_accuracy: 0.9265 - val_loss: 0.2013\n",
      "Epoch 5/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9786 - loss: 0.0576\n",
      "Epoch 5: val_accuracy improved from 0.94150 to 0.94558, saving model to model_combination_CNN_HOG_Gabor_LBP_SIFT_Contour.keras\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 42ms/step - accuracy: 0.9786 - loss: 0.0576 - val_accuracy: 0.9456 - val_loss: 0.1527\n",
      "Epoch 6/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9800 - loss: 0.0522\n",
      "Epoch 6: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9800 - loss: 0.0521 - val_accuracy: 0.9456 - val_loss: 0.1520\n",
      "Epoch 7/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9859 - loss: 0.0482\n",
      "Epoch 7: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9859 - loss: 0.0481 - val_accuracy: 0.9442 - val_loss: 0.1726\n",
      "Epoch 8/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9870 - loss: 0.0437\n",
      "Epoch 8: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9870 - loss: 0.0435 - val_accuracy: 0.9388 - val_loss: 0.2797\n",
      "Epoch 9/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9877 - loss: 0.0399\n",
      "Epoch 9: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9877 - loss: 0.0399 - val_accuracy: 0.9429 - val_loss: 0.1922\n",
      "Epoch 10/20\n",
      "\u001b[1m91/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9881 - loss: 0.0345\n",
      "Epoch 10: val_accuracy did not improve from 0.94558\n",
      "\u001b[1m92/92\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 25ms/step - accuracy: 0.9882 - loss: 0.0344 - val_accuracy: 0.9442 - val_loss: 0.1784\n",
      "Epoch 10: early stopping\n",
      "Restoring model weights from the end of the best epoch: 5.\n",
      "Combination ('CNN', 'HOG', 'Gabor', 'LBP', 'SIFT', 'Contour') -> Test Accuracy: 0.9619\n",
      "\n",
      "Summary of Results:\n",
      "Features: ('CNN',), Accuracy: 0.9674\n",
      "Features: ('HOG',), Accuracy: 0.7497\n",
      "Features: ('Gabor',), Accuracy: 0.5049\n",
      "Features: ('LBP',), Accuracy: 0.7911\n",
      "Features: ('SIFT',), Accuracy: 0.8335\n",
      "Features: ('Contour',), Accuracy: 0.4995\n",
      "Features: ('CNN', 'HOG'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'Gabor'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'LBP'), Accuracy: 0.9652\n",
      "Features: ('CNN', 'SIFT'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'Contour'), Accuracy: 0.9619\n",
      "Features: ('HOG', 'Gabor'), Accuracy: 0.7584\n",
      "Features: ('HOG', 'LBP'), Accuracy: 0.7856\n",
      "Features: ('HOG', 'SIFT'), Accuracy: 0.8487\n",
      "Features: ('HOG', 'Contour'), Accuracy: 0.7399\n",
      "Features: ('Gabor', 'LBP'), Accuracy: 0.7291\n",
      "Features: ('Gabor', 'SIFT'), Accuracy: 0.8248\n",
      "Features: ('Gabor', 'Contour'), Accuracy: 0.5005\n",
      "Features: ('LBP', 'SIFT'), Accuracy: 0.8400\n",
      "Features: ('LBP', 'Contour'), Accuracy: 0.7889\n",
      "Features: ('SIFT', 'Contour'), Accuracy: 0.8368\n",
      "Features: ('CNN', 'HOG', 'Gabor'), Accuracy: 0.9630\n",
      "Features: ('CNN', 'HOG', 'LBP'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'HOG', 'SIFT'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'HOG', 'Contour'), Accuracy: 0.9630\n",
      "Features: ('CNN', 'Gabor', 'LBP'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'Gabor', 'SIFT'), Accuracy: 0.9663\n",
      "Features: ('CNN', 'Gabor', 'Contour'), Accuracy: 0.9434\n",
      "Features: ('CNN', 'LBP', 'SIFT'), Accuracy: 0.9510\n",
      "Features: ('CNN', 'LBP', 'Contour'), Accuracy: 0.9521\n",
      "Features: ('CNN', 'SIFT', 'Contour'), Accuracy: 0.9510\n",
      "Features: ('HOG', 'Gabor', 'LBP'), Accuracy: 0.7878\n",
      "Features: ('HOG', 'Gabor', 'SIFT'), Accuracy: 0.8466\n",
      "Features: ('HOG', 'Gabor', 'Contour'), Accuracy: 0.7421\n",
      "Features: ('HOG', 'LBP', 'SIFT'), Accuracy: 0.8575\n",
      "Features: ('HOG', 'LBP', 'Contour'), Accuracy: 0.7878\n",
      "Features: ('HOG', 'SIFT', 'Contour'), Accuracy: 0.8509\n",
      "Features: ('Gabor', 'LBP', 'SIFT'), Accuracy: 0.8411\n",
      "Features: ('Gabor', 'LBP', 'Contour'), Accuracy: 0.7356\n",
      "Features: ('Gabor', 'SIFT', 'Contour'), Accuracy: 0.8335\n",
      "Features: ('LBP', 'SIFT', 'Contour'), Accuracy: 0.8422\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'LBP'), Accuracy: 0.9652\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'SIFT'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'HOG', 'LBP', 'SIFT'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'HOG', 'LBP', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'HOG', 'SIFT', 'Contour'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'Gabor', 'LBP', 'SIFT'), Accuracy: 0.9532\n",
      "Features: ('CNN', 'Gabor', 'LBP', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'Gabor', 'SIFT', 'Contour'), Accuracy: 0.9510\n",
      "Features: ('CNN', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.9543\n",
      "Features: ('HOG', 'Gabor', 'LBP', 'SIFT'), Accuracy: 0.8596\n",
      "Features: ('HOG', 'Gabor', 'LBP', 'Contour'), Accuracy: 0.7856\n",
      "Features: ('HOG', 'Gabor', 'SIFT', 'Contour'), Accuracy: 0.8509\n",
      "Features: ('HOG', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.8422\n",
      "Features: ('Gabor', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.8324\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'LBP', 'SIFT'), Accuracy: 0.9630\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'LBP', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'SIFT', 'Contour'), Accuracy: 0.9597\n",
      "Features: ('CNN', 'HOG', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'Gabor', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.9543\n",
      "Features: ('HOG', 'Gabor', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.8607\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.9619\n"
     ]
    }
   ],
   "source": [
    "# Define the feature inputs\n",
    "input_hog = Input(shape=(hog_train.shape[1],), name='HOG_Input')\n",
    "input_gabor = Input(shape=(gabor_train.shape[1],), name='Gabor_Input')\n",
    "input_lbp = Input(shape=(lbp_train.shape[1],), name='LBP_Input')\n",
    "# Add SIFT input\n",
    "input_sift = Input(shape=(sift_train.shape[1],), name='SIFT_Input')\n",
    "#Add Contour\n",
    "input_contour = Input(shape=(contour_train.shape[1],), name='Contour_Input')\n",
    "#Add_KAZE\n",
    "# input_qmft=Input(shape=(qmft_train.shape[1],), name='QMFT_Input')\n",
    "\n",
    "# Define all feature inputs\n",
    "feature_inputs = {\n",
    "    'CNN': flat_cnn,\n",
    "    'HOG': input_hog,\n",
    "    'Gabor': input_gabor,\n",
    "    'LBP': input_lbp,\n",
    "    'SIFT': input_sift,\n",
    "    'Contour':input_contour,\n",
    "    # 'QMFT':input_qmft\n",
    "}\n",
    "\n",
    "# Define all input shapes\n",
    "input_shapes = {\n",
    "    'CNN': input_image,\n",
    "    'HOG': input_hog,\n",
    "    'Gabor': input_gabor,\n",
    "    'LBP': input_lbp,\n",
    "    'SIFT': input_sift,\n",
    "    'Contour':input_contour,\n",
    "    # 'QMFT':input_qmft\n",
    "}\n",
    "\n",
    "# Test all combinations of features\n",
    "results = []\n",
    "for r in range(1, len(feature_inputs) + 1):\n",
    "    for selected_features in combinations(feature_inputs.keys(), r):\n",
    "        print(f\"Testing combination: {selected_features}\")\n",
    "        \n",
    "        # Combine selected features\n",
    "        combined_inputs = [feature_inputs[feat] for feat in selected_features]\n",
    "        combined_layer = concatenate(combined_inputs)\n",
    "        \n",
    "        # Fully connected layers\n",
    "        dense1 = Dense(512, activation='relu')(combined_layer)\n",
    "        drop4 = Dropout(0.5)(dense1)\n",
    "        # dense2 = Dense(256, activation='relu')(drop4)\n",
    "        # drop5 = Dropout(0.3)(dense2)\n",
    "        finalout = Dense(3, activation='softmax')(drop4)\n",
    "        \n",
    "        # Build model with selected inputs\n",
    "        selected_inputs = [input_shapes[feat] for feat in selected_features]\n",
    "        model = Model(inputs=selected_inputs, outputs=finalout)\n",
    "        model.compile(optimizer=Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
    "        \n",
    "        # Prepare inputs for training\n",
    "        train_inputs = [X_train if feat == 'CNN' else eval(f\"{feat.lower()}_train\") for feat in selected_features]\n",
    "        test_inputs = [X_test if feat == 'CNN' else eval(f\"{feat.lower()}_test\") for feat in selected_features]\n",
    "        \n",
    "        # Callbacks for early stopping and model checkpointing\n",
    "        model_name = f\"model_combination_{'_'.join(selected_features)}.keras\"\n",
    "        early_stop = EarlyStopping(monitor='val_accuracy', patience=5, restore_best_weights=True, verbose=1)\n",
    "        model_checkpoint = ModelCheckpoint(model_name, monitor='val_accuracy', save_best_only=True, verbose=1)\n",
    "        \n",
    "        # Train the model\n",
    "        history = model.fit(\n",
    "            train_inputs, \n",
    "            y_train, \n",
    "            batch_size=32, \n",
    "            epochs=20, \n",
    "            validation_split=0.2,\n",
    "            shuffle=True,  # Set shuffle to False\n",
    "            callbacks=[early_stop, model_checkpoint],\n",
    "            verbose=1\n",
    "        )\n",
    "        \n",
    "        # Evaluate the model\n",
    "        test_loss, test_acc = model.evaluate(test_inputs, y_test, verbose=0)\n",
    "        results.append((selected_features, test_acc))\n",
    "        print(f\"Combination {selected_features} -> Test Accuracy: {test_acc:.4f}\")\n",
    "        \n",
    "# Print all results\n",
    "print(\"\\nSummary of Results:\")\n",
    "for comb, acc in results:\n",
    "    print(f\"Features: {comb}, Accuracy: {acc:.4f}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b96128a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T11:15:46.198054Z",
     "iopub.status.busy": "2024-12-31T11:15:46.197737Z",
     "iopub.status.idle": "2024-12-31T11:15:46.211222Z",
     "shell.execute_reply": "2024-12-31T11:15:46.210583Z"
    },
    "papermill": {
     "duration": 0.768938,
     "end_time": "2024-12-31T11:15:46.212312",
     "exception": false,
     "start_time": "2024-12-31T11:15:45.443374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Summary of Results (Sorted by Accuracy):\n",
      "Features: ('CNN',), Accuracy: 0.9674\n",
      "Features: ('CNN', 'Gabor', 'SIFT'), Accuracy: 0.9663\n",
      "Features: ('CNN', 'LBP'), Accuracy: 0.9652\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'LBP'), Accuracy: 0.9652\n",
      "Features: ('CNN', 'Gabor'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'SIFT'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'HOG', 'LBP'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'HOG', 'SIFT'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'HOG', 'SIFT', 'Contour'), Accuracy: 0.9641\n",
      "Features: ('CNN', 'HOG', 'Gabor'), Accuracy: 0.9630\n",
      "Features: ('CNN', 'HOG', 'Contour'), Accuracy: 0.9630\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'LBP', 'SIFT'), Accuracy: 0.9630\n",
      "Features: ('CNN', 'HOG'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'Contour'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'Gabor', 'LBP'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'SIFT'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'HOG', 'LBP', 'SIFT'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.9619\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'HOG', 'LBP', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'Gabor', 'LBP', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'LBP', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'HOG', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.9608\n",
      "Features: ('CNN', 'HOG', 'Gabor', 'SIFT', 'Contour'), Accuracy: 0.9597\n",
      "Features: ('CNN', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.9543\n",
      "Features: ('CNN', 'Gabor', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.9543\n",
      "Features: ('CNN', 'Gabor', 'LBP', 'SIFT'), Accuracy: 0.9532\n",
      "Features: ('CNN', 'LBP', 'Contour'), Accuracy: 0.9521\n",
      "Features: ('CNN', 'LBP', 'SIFT'), Accuracy: 0.9510\n",
      "Features: ('CNN', 'SIFT', 'Contour'), Accuracy: 0.9510\n",
      "Features: ('CNN', 'Gabor', 'SIFT', 'Contour'), Accuracy: 0.9510\n",
      "Features: ('CNN', 'Gabor', 'Contour'), Accuracy: 0.9434\n",
      "Features: ('HOG', 'Gabor', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.8607\n",
      "Features: ('HOG', 'Gabor', 'LBP', 'SIFT'), Accuracy: 0.8596\n",
      "Features: ('HOG', 'LBP', 'SIFT'), Accuracy: 0.8575\n",
      "Features: ('HOG', 'SIFT', 'Contour'), Accuracy: 0.8509\n",
      "Features: ('HOG', 'Gabor', 'SIFT', 'Contour'), Accuracy: 0.8509\n",
      "Features: ('HOG', 'SIFT'), Accuracy: 0.8487\n",
      "Features: ('HOG', 'Gabor', 'SIFT'), Accuracy: 0.8466\n",
      "Features: ('LBP', 'SIFT', 'Contour'), Accuracy: 0.8422\n",
      "Features: ('HOG', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.8422\n",
      "Features: ('Gabor', 'LBP', 'SIFT'), Accuracy: 0.8411\n",
      "Features: ('LBP', 'SIFT'), Accuracy: 0.8400\n",
      "Features: ('SIFT', 'Contour'), Accuracy: 0.8368\n",
      "Features: ('SIFT',), Accuracy: 0.8335\n",
      "Features: ('Gabor', 'SIFT', 'Contour'), Accuracy: 0.8335\n",
      "Features: ('Gabor', 'LBP', 'SIFT', 'Contour'), Accuracy: 0.8324\n",
      "Features: ('Gabor', 'SIFT'), Accuracy: 0.8248\n",
      "Features: ('LBP',), Accuracy: 0.7911\n",
      "Features: ('LBP', 'Contour'), Accuracy: 0.7889\n",
      "Features: ('HOG', 'Gabor', 'LBP'), Accuracy: 0.7878\n",
      "Features: ('HOG', 'LBP', 'Contour'), Accuracy: 0.7878\n",
      "Features: ('HOG', 'LBP'), Accuracy: 0.7856\n",
      "Features: ('HOG', 'Gabor', 'LBP', 'Contour'), Accuracy: 0.7856\n",
      "Features: ('HOG', 'Gabor'), Accuracy: 0.7584\n",
      "Features: ('HOG',), Accuracy: 0.7497\n",
      "Features: ('HOG', 'Gabor', 'Contour'), Accuracy: 0.7421\n",
      "Features: ('HOG', 'Contour'), Accuracy: 0.7399\n",
      "Features: ('Gabor', 'LBP', 'Contour'), Accuracy: 0.7356\n",
      "Features: ('Gabor', 'LBP'), Accuracy: 0.7291\n",
      "Features: ('Gabor',), Accuracy: 0.5049\n",
      "Features: ('Gabor', 'Contour'), Accuracy: 0.5005\n",
      "Features: ('Contour',), Accuracy: 0.4995\n"
     ]
    }
   ],
   "source": [
    "# Sort results by accuracy in descending order\n",
    "sorted_results = sorted(results, key=lambda x: x[1], reverse=True)\n",
    "\n",
    "# Print all results\n",
    "print(\"\\nSummary of Results (Sorted by Accuracy):\")\n",
    "for comb, acc in sorted_results:\n",
    "    print(f\"Features: {comb}, Accuracy: {acc:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c418b1dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T11:15:47.685347Z",
     "iopub.status.busy": "2024-12-31T11:15:47.684871Z",
     "iopub.status.idle": "2024-12-31T11:15:51.106096Z",
     "shell.execute_reply": "2024-12-31T11:15:51.105225Z"
    },
    "papermill": {
     "duration": 4.1992,
     "end_time": "2024-12-31T11:15:51.107562",
     "exception": false,
     "start_time": "2024-12-31T11:15:46.908362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     Class 0       0.98      0.95      0.96       460\n",
      "     Class 1       0.95      0.98      0.97       459\n",
      "\n",
      "    accuracy                           0.97       919\n",
      "   macro avg       0.97      0.97      0.97       919\n",
      "weighted avg       0.97      0.97      0.97       919\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow.keras.models import load_model\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "model = load_model('model_combination_CNN_HOG_Gabor_LBP.keras')\n",
    "test_inputs = [X_test,hog_test,gabor_test,lbp_test]  # Ensure these variables are defined\n",
    "y_pred_probs = model.predict(test_inputs)\n",
    "y_pred = np.argmax(y_pred_probs, axis=1)  # Get the predicted class labels\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(y_test, y_pred, target_names=['Class 0', 'Class 1'])\n",
    "print(report)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Generate confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(\n",
    "    conf_matrix,\n",
    "    annot=True,\n",
    "    fmt='d',\n",
    "    cmap='cubehelix',\n",
    "    xticklabels=['Parasitized', 'Normal'],\n",
    "    yticklabels=['Parasitized', 'Normal'],\n",
    "    annot_kws={\"size\": 12, \"weight\": \"bold\"}\n",
    ")\n",
    "\n",
    "# Add bold text to titles, labels, and ticks\n",
    "plt.title(\"CNN+HOG+Gabor+LBP Malaria Cell CM\", fontweight='bold', fontsize=16)\n",
    "plt.xlabel(\"Predicted Label\", fontweight='bold', fontsize=14)\n",
    "plt.ylabel(\"True Label\", fontweight='bold', fontsize=14)\n",
    "\n",
    "plt.xticks(fontweight='bold', fontsize=12)\n",
    "plt.yticks(fontweight='bold', fontsize=12)\n",
    "\n",
    "# Save the figure with high DPI\n",
    "plt.savefig(\"Malaria Cell CNN_HOG_Gabor_LBPCM.png\", dpi=300, bbox_inches='tight')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3ec72603",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T11:15:52.552355Z",
     "iopub.status.busy": "2024-12-31T11:15:52.551769Z",
     "iopub.status.idle": "2024-12-31T11:15:55.586920Z",
     "shell.execute_reply": "2024-12-31T11:15:55.586081Z"
    },
    "papermill": {
     "duration": 3.74021,
     "end_time": "2024-12-31T11:15:55.588485",
     "exception": false,
     "start_time": "2024-12-31T11:15:51.848275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     Class 0       0.97      0.95      0.96       460\n",
      "     Class 1       0.95      0.97      0.96       459\n",
      "\n",
      "    accuracy                           0.96       919\n",
      "   macro avg       0.96      0.96      0.96       919\n",
      "weighted avg       0.96      0.96      0.96       919\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = load_model('model_combination_CNN_HOG_Contour.keras')\n",
    "test_inputs = [X_test,hog_test,contour_test]  # Ensure these variables are defined\n",
    "y_pred_probs = model.predict(test_inputs)\n",
    "y_pred = np.argmax(y_pred_probs, axis=1)  # Get the predicted class labels\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(y_test, y_pred, target_names=['Class 0', 'Class 1'])\n",
    "print(report)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Generate confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(\n",
    "    conf_matrix,\n",
    "    annot=True,\n",
    "    fmt='d',\n",
    "    cmap='YlGnBu',\n",
    "    xticklabels=['Parasitized', 'Normal'],\n",
    "    yticklabels=['Parasitized', 'Normal'],\n",
    "    annot_kws={\"size\": 12, \"weight\": \"bold\"}\n",
    ")\n",
    "\n",
    "# Add bold text to titles, labels, and ticks\n",
    "plt.title(\"CNN+HOG+Contour Malaria Cell CM\", fontweight='bold', fontsize=16)\n",
    "plt.xlabel(\"Predicted Label\", fontweight='bold', fontsize=14)\n",
    "plt.ylabel(\"True Label\", fontweight='bold', fontsize=14)\n",
    "\n",
    "plt.xticks(fontweight='bold', fontsize=12)\n",
    "plt.yticks(fontweight='bold', fontsize=12)\n",
    "\n",
    "# Save the figure with high DPI\n",
    "plt.savefig(\"Malaria Cell CNN_HOG_ContourCM.png\", dpi=300, bbox_inches='tight')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fb6aaf0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T11:15:57.068544Z",
     "iopub.status.busy": "2024-12-31T11:15:57.067980Z",
     "iopub.status.idle": "2024-12-31T11:16:00.178431Z",
     "shell.execute_reply": "2024-12-31T11:16:00.177498Z"
    },
    "papermill": {
     "duration": 3.819361,
     "end_time": "2024-12-31T11:16:00.180142",
     "exception": false,
     "start_time": "2024-12-31T11:15:56.360781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 17ms/step\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     Class 0       0.99      0.94      0.96       460\n",
      "     Class 1       0.94      0.99      0.96       459\n",
      "\n",
      "    accuracy                           0.96       919\n",
      "   macro avg       0.96      0.96      0.96       919\n",
      "weighted avg       0.96      0.96      0.96       919\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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T+sz4D744APcv38fv/zyCz788EO4uLjA3NwcBgYGsLCwQI0aNeDn54dZs2bh/PnzKpMeFi5ciB9//BH169eHUqmElZUVWrdujZ07dxb60naHDh1w8eJF9OnTB3Z2djAyMkLVqlURGBiIU6dOqSxuLwgCvv/+e5w+fRqDBw9GzZo1UaZMGRgZGcHe3h4+Pj74+eefcf78+WJfi1PfmJqaomrVqvD398eff/6JQ4cOvZUVADS1ZcsWbN68GaNHj0bLli1RqVIlmJqaQqFQwNzcHG5ubhgyZAjCwsIwb948XYer995//30cOXIE7dq1g7m5OUxNTeHu7o5vv/0WW7duLVJysGnTJgQHB8PV1RVGRkawsbFB586dERoa+tYWcndxccG5c+fQt29flCtXDkZGRnB2dsbnn3+Oc+fOSatkFIW1tTX++OMPXLt2DZMmTULTpk2lzyETExM4OzujS5cu+O6771SKCZaWlti/fz/27NmDvn37olq1ajAzM4OBgQHKli2Lhg0bYsiQIdi4cSN27txZ5FgLq1u3brh//z7WrFmDXr16oWrVqtIyTtbW1vDw8MCoUaNw9OhRdO3a9a3HVxoJYlHr6ERERERUKum8IklEREREJRMTSSIiIiLSCBNJIiIiItIIE0kiIiIi0ggTSSIiIiLSCBNJIiIiItIIE0kiIiIi0ohO72yjS0OUg3QdAhFpycIXP+k6BCLSkrJmxjp77m5CF631vVPcrfG5c+fORWBgIMaMGYMlS5YAANq0aYPQ0FBZu08//RQrV66UHkdFRWHEiBE4duwYzM3NERAQgODg4ELdtajUJpJEREREJd25c+fw448/ol69eirHhg4dihkzZkiPc94lLDMzE35+fnBwcEBYWBiePHmCgQMHwsjICHPmzFH7+Xlpm4iIiEgNCi3+p4mkpCT069cPP//8M8qWLaty3MzMDA4ODtJmaWkpHTt48CCuX7+O9evXo0GDBujcuTNmzpyJZcuWIS0trRDvCRERERG9kSAIWttSU1ORkJAg21JTUwuMZ+TIkfDz80P79u3zPP7777+jXLlyqFu3LgIDA5GcnCwdO336NNzd3WFvby/t8/HxQUJCAq5du6b2e8JEkoiIiEjHgoODYWVlJduCg4Pzbb9x40ZcvHgx3zZ9+/bF+vXrcezYMQQGBuK3335D//79pePR0dGyJBKA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gOXLl2PFihVvO1QiIiIqbThGUoVez9r+448/AABmZmYqx0xNTQEAW7ZseasxEREREdFrelWRzO3ly5cAgEmTJsHc3Byenp4AgPPnzyMwMBAAkJKSorP4iIiIqBThGEkVep1Itm3bFrt378a9e/fg6+urclwQBI2WDCIiIiKiotPrS9tLly5FpUqVIIpinlvFihXx3Xff6TpMIiIiKg0Ugva2EkqvE8kqVarg8uXLmDx5MmrXrg2lUgmlUonatWtj8uTJuHz5MqpUqaLrMImIiKg0EBTa20oovb60DQBly5ZFcHAwgoODdR0KEREREeWg94lktkuXLuHGjRtITk7GJ598outwiIiIqJQRSvAlaG3R+1rq+fPn4e7uDk9PTwwYMADDhw9HSkoKbGxsYGhoiJCQEF2HSERERFQq6XUi+ffff6Nt27a4fv26bJKNiYkJ3n//fWRlZfHONkRERPR2cLKNCr1OJKdNm4akpCQoFAp4e3vLjnl5eQEATp48qYvQiIiIiEo9vR4jeezYMQiCgODgYHh7e6Nly5bSsezZ2g8fPtRRdERERFSqcEFyFXpdkYyPjwcANGzYUOVYeno6ACA5OfmtxkREREREr+l1Iung4AAAOHjwoMqx7LGRlSpVeqsxERERUSnFMZIq9DqR7NChA0RRxMKFC/H5559L+9u2bYvffvsNgiCgY8eOOoyQiIiISgtBELS2lVR6nUhOmTIF1tbWEEURERER0hsdGhoKALC2tsaXX36pyxCJiIiISi29TiSrVKmCw4cPo06dOir32a5bty4OHz6MypUr6zpMIiIiKg14aVuFXs/aBoBGjRohMjISly9fxq1btwAANWvWRP369XUcGREREVHppteJZFRUFIDXk27q168vSx7T09Px5MkTAICTk5NO4iMiIqJSpASPZdQWvb+07eLigmbNmiE6Olp27OzZs6hSpQqqVq2qo+iIiIiISje9TiQBQBRFXLx4EU2aNMHly5fzPE5ERESkdRwjqULvE8nsmdoPHz5Ey5YtsXv3bh1HRERERERACUgkAWDgwIEwMDBAUlISPvjgAyxZskTXIREREVFpw4qkihKRSA4bNgw7duyAubk5MjMz8cUXX3D9SCIiInqruCC5qhKRSAKAn58fjh8/DkdHR4iiiLCwMF2HRERERFSqlZhEEgAaNGiA06dPw93dnZNs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\n",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = load_model('model_combination_CNN_HOG_Gabor_LBP_SIFT.keras')\n",
    "test_inputs = [X_test,hog_test,gabor_test,lbp_test,sift_test]  # Ensure these variables are defined\n",
    "# Predict class probabilities and class labels\n",
    "y_pred_probs = model.predict(test_inputs)\n",
    "y_pred = np.argmax(y_pred_probs, axis=1)  # Get the predicted class labels\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(y_test, y_pred, target_names=['Class 0', 'Class 1'])\n",
    "print(report)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Generate confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(\n",
    "    conf_matrix,\n",
    "    annot=True,\n",
    "    fmt='d',\n",
    "    cmap='BuPu',\n",
    "    xticklabels=['Parasitized', 'Normal'],\n",
    "    yticklabels=['Parasitized', 'Normal'],\n",
    "    annot_kws={\"size\": 12, \"weight\": \"bold\"}\n",
    ")\n",
    "\n",
    "# Add bold text to titles, labels, and ticks\n",
    "plt.title(\"CNN+HOG+Gabor+LBP+SIFT Malaria Cell CM\", fontweight='bold', fontsize=16)\n",
    "plt.xlabel(\"Predicted Label\", fontweight='bold', fontsize=14)\n",
    "plt.ylabel(\"True Label\", fontweight='bold', fontsize=14)\n",
    "\n",
    "plt.xticks(fontweight='bold', fontsize=12)\n",
    "plt.yticks(fontweight='bold', fontsize=12)\n",
    "\n",
    "# Save the figure with high DPI\n",
    "plt.savefig(\"Malaria Cell CNN_HOG_Gabor_LBP_SIFTCM.png\", dpi=300, bbox_inches='tight')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99163b27",
   "metadata": {
    "papermill": {
     "duration": 0.758379,
     "end_time": "2024-12-31T11:16:01.722913",
     "exception": false,
     "start_time": "2024-12-31T11:16:00.964534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 4567313,
     "sourceId": 7800340,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 87153,
     "sourceId": 200743,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2852.932587,
   "end_time": "2024-12-31T11:16:06.599145",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-31T10:28:33.666558",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
